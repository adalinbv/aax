
set(EXTRA_LIBS ${XML_LIBRARY} ${EXTRA_LIBS})

#CHECK_LIBRARY_EXISTS(m sqrtf "" HAVE_LIBM)
FIND_LIBRARY(HAVE_LIBM NAMES math m libm)
if(HAVE_LIBM)
  set(EXTRA_LIBS m ${EXTRA_LIBS})
endif(HAVE_LIBM)

FUNCTION(CREATE_CPP_TEST TEST_NAME)
  set_property(SOURCE ${TEST_NAME} APPEND PROPERTY COMPILE_FLAGS "-std=c++11")
  add_executable(${TEST_NAME} ${TEST_NAME}.cpp)
  target_link_libraries(${TEST_NAME} ${LIBAEONWAVE}-static ${EXTRA_LIBS})
  add_test(${TEST_NAME} ${EXECUTABLE_OUTPUT_PATH}/${TEST_NAME})
ENDFUNCTION()

FUNCTION(CREATE_TEST TEST_NAME)
  add_executable(${TEST_NAME} ${TEST_NAME}.c)
  target_link_libraries(${TEST_NAME} ${LIBAEONWAVE}-static ${EXTRA_LIBS})
  add_test(${TEST_NAME} ${EXECUTABLE_OUTPUT_PATH}/${TEST_NAME})
ENDFUNCTION()

CREATE_CPP_TEST(testposition)
CREATE_CPP_TEST(testparam)

CREATE_TEST(test3dmath)
CREATE_TEST(testarch2d)
CREATE_TEST(testregistering)
CREATE_TEST(testlimiter)
#CREATE_TEST(testfrequencyfilter)
CREATE_TEST(testmemory)
CREATE_TEST(testtypes)
CREATE_TEST(testdsp)
CREATE_TEST(testurl)

CREATE_TEST(matrix_test)
message("SSE2: ${SSE2_FOUND}, AVX: ${AVX_FOUND}")
if(AVX_FOUND)
  set_property(SOURCE matrix_test.c APPEND
               PROPERTY COMPILE_FLAGS "-mavx -march=sandybridge"
  )
endif()
if(NOT X86_64 AND SSE2_FOUND)
  set_property(SOURCE matrix_test.c APPEND
               PROPERTY COMPILE_FLAGS "-msse2 -mfpmath=sse -march=pentium-m"
  )
endif()
if(ARM)
  set_property(SOURCE matrix_test.c APPEND
                PROPERTY COMPILE_FLAGS "-march=armv7-a -mfpu=neon -funsafe-math-optimizations"
  )
endif()
