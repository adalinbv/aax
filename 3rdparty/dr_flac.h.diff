--- /tmp/dr_flac.h	2018-05-12 13:41:10.051473929 +0200
+++ dr_flac.h	2018-05-12 13:45:38.105738476 +0200
@@ -118,8 +118,14 @@
 #ifndef dr_flac_h
 #define dr_flac_h
 
+#if HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #include <stddef.h>
 
+#include <arch.h>
+
 #if defined(_MSC_VER) && _MSC_VER < 1600
 typedef   signed char    drflac_int8;
 typedef unsigned char    drflac_uint8;
@@ -846,7 +852,7 @@
 #define DRFLAC_INLINE __forceinline
 #else
 #ifdef __GNUC__
-#define DRFLAC_INLINE inline __attribute__((always_inline))
+#define DRFLAC_INLINE inline
 #else
 #define DRFLAC_INLINE inline
 #endif
@@ -900,6 +906,7 @@
 
 
 //// Endian Management ////
+#if 0
 static DRFLAC_INLINE drflac_bool32 drflac__is_little_endian()
 {
 #if defined(DRFLAC_X86) || defined(DRFLAC_X64)
@@ -909,7 +916,9 @@
     return (*(char*)&n) == 1;
 #endif
 }
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint16 drflac__swap_endian_uint16(drflac_uint16 n)
 {
 #ifdef DRFLAC_HAS_BYTESWAP_INTRINSIC
@@ -925,7 +934,9 @@
            ((n & 0x00FF) << 8);
 #endif
 }
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint32 drflac__swap_endian_uint32(drflac_uint32 n)
 {
 #ifdef DRFLAC_HAS_BYTESWAP_INTRINSIC
@@ -943,7 +954,9 @@
            ((n & 0x000000FF) << 24);
 #endif
 }
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint64 drflac__swap_endian_uint64(drflac_uint64 n)
 {
 #ifdef DRFLAC_HAS_BYTESWAP_INTRINSIC
@@ -965,7 +978,7 @@
            ((n & (drflac_uint64)0x00000000000000FF) << 56);
 #endif
 }
-
+#endif
 
 static DRFLAC_INLINE drflac_uint16 drflac__be2host_16(drflac_uint16 n)
 {
@@ -1035,6 +1048,7 @@
 
 
 // The CRC code below is based on this document: http://zlib.net/crc_v3.txt
+#if 0
 static drflac_uint8 drflac__crc8_table[] = {
     0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
     0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
@@ -1053,7 +1067,9 @@
     0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
     0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
 };
+#endif
 
+#if 0
 static drflac_uint16 drflac__crc16_table[] = {
     0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
     0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
@@ -1088,11 +1104,14 @@
     0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
     0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
 };
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint8 drflac_crc8_byte(drflac_uint8 crc, drflac_uint8 data)
 {
     return drflac__crc8_table[crc ^ data];
 }
+#endif
 
 static DRFLAC_INLINE drflac_uint8 drflac_crc8(drflac_uint8 crc, drflac_uint32 data, drflac_uint32 count)
 {
@@ -1137,11 +1156,14 @@
 #endif
 }
 
+#if 0
 static DRFLAC_INLINE drflac_uint16 drflac_crc16_byte(drflac_uint16 crc, drflac_uint8 data)
 {
     return (crc << 8) ^ drflac__crc16_table[(drflac_uint8)(crc >> 8) ^ data];
 }
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint16 drflac_crc16_bytes(drflac_uint16 crc, drflac_cache_t data, drflac_uint32 byteCount)
 {
     switch (byteCount)
@@ -1160,7 +1182,9 @@
 
     return crc;
 }
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint16 drflac_crc16__32bit(drflac_uint16 crc, drflac_uint32 data, drflac_uint32 count)
 {
     drflac_assert(count <= 64);
@@ -1205,7 +1229,9 @@
 #endif
 #endif
 }
+#endif
 
+#if 0
 static DRFLAC_INLINE drflac_uint16 drflac_crc16__64bit(drflac_uint16 crc, drflac_uint64 data, drflac_uint32 count)
 {
     drflac_assert(count <= 64);
@@ -1239,8 +1265,9 @@
     return crc;
 #endif
 }
+#endif
 
-
+#if 0
 static DRFLAC_INLINE drflac_uint16 drflac_crc16(drflac_uint16 crc, drflac_cache_t data, drflac_uint32 count)
 {
 #ifdef DRFLAC_64BIT
@@ -1249,6 +1276,7 @@
     return drflac_crc16__32bit(crc, data, count);
 #endif
 }
+#endif
 
 
 #ifdef DRFLAC_64BIT
@@ -1921,36 +1949,67 @@
     switch (order)
     {
     case 32: prediction += coefficients[31] * pDecodedSamples[-32];
+    // intentional fallthrough
     case 31: prediction += coefficients[30] * pDecodedSamples[-31];
+    // intentional fallthrough
     case 30: prediction += coefficients[29] * pDecodedSamples[-30];
+    // intentional fallthrough
     case 29: prediction += coefficients[28] * pDecodedSamples[-29];
+    // intentional fallthrough
     case 28: prediction += coefficients[27] * pDecodedSamples[-28];
+    // intentional fallthrough
     case 27: prediction += coefficients[26] * pDecodedSamples[-27];
+    // intentional fallthrough
     case 26: prediction += coefficients[25] * pDecodedSamples[-26];
+    // intentional fallthrough
     case 25: prediction += coefficients[24] * pDecodedSamples[-25];
+    // intentional fallthrough
     case 24: prediction += coefficients[23] * pDecodedSamples[-24];
+    // intentional fallthrough
     case 23: prediction += coefficients[22] * pDecodedSamples[-23];
+    // intentional fallthrough
     case 22: prediction += coefficients[21] * pDecodedSamples[-22];
+    // intentional fallthrough
     case 21: prediction += coefficients[20] * pDecodedSamples[-21];
+    // intentional fallthrough
     case 20: prediction += coefficients[19] * pDecodedSamples[-20];
+    // intentional fallthrough
     case 19: prediction += coefficients[18] * pDecodedSamples[-19];
+    // intentional fallthrough
     case 18: prediction += coefficients[17] * pDecodedSamples[-18];
+    // intentional fallthrough
     case 17: prediction += coefficients[16] * pDecodedSamples[-17];
+    // intentional fallthrough
     case 16: prediction += coefficients[15] * pDecodedSamples[-16];
+    // intentional fallthrough
     case 15: prediction += coefficients[14] * pDecodedSamples[-15];
+    // intentional fallthrough
     case 14: prediction += coefficients[13] * pDecodedSamples[-14];
+    // intentional fallthrough
     case 13: prediction += coefficients[12] * pDecodedSamples[-13];
+    // intentional fallthrough
     case 12: prediction += coefficients[11] * pDecodedSamples[-12];
+    // intentional fallthrough
     case 11: prediction += coefficients[10] * pDecodedSamples[-11];
+    // intentional fallthrough
     case 10: prediction += coefficients[ 9] * pDecodedSamples[-10];
+    // intentional fallthrough
     case  9: prediction += coefficients[ 8] * pDecodedSamples[- 9];
+    // intentional fallthrough
     case  8: prediction += coefficients[ 7] * pDecodedSamples[- 8];
+    // intentional fallthrough
     case  7: prediction += coefficients[ 6] * pDecodedSamples[- 7];
+    // intentional fallthrough
     case  6: prediction += coefficients[ 5] * pDecodedSamples[- 6];
+    // intentional fallthrough
     case  5: prediction += coefficients[ 4] * pDecodedSamples[- 5];
+    // intentional fallthrough
     case  4: prediction += coefficients[ 3] * pDecodedSamples[- 4];
+    // intentional fallthrough
     case  3: prediction += coefficients[ 2] * pDecodedSamples[- 3];
+    // intentional fallthrough
     case  2: prediction += coefficients[ 1] * pDecodedSamples[- 2];
+    // intentional fallthrough
     case  1: prediction += coefficients[ 0] * pDecodedSamples[- 1];
     }
 
@@ -2097,36 +2156,67 @@
     switch (order)
     {
     case 32: prediction += coefficients[31] * (drflac_int64)pDecodedSamples[-32];
+    // intentional fallthrough
     case 31: prediction += coefficients[30] * (drflac_int64)pDecodedSamples[-31];
+    // intentional fallthrough
     case 30: prediction += coefficients[29] * (drflac_int64)pDecodedSamples[-30];
+    // intentional fallthrough
     case 29: prediction += coefficients[28] * (drflac_int64)pDecodedSamples[-29];
+    // intentional fallthrough
     case 28: prediction += coefficients[27] * (drflac_int64)pDecodedSamples[-28];
+    // intentional fallthrough
     case 27: prediction += coefficients[26] * (drflac_int64)pDecodedSamples[-27];
+    // intentional fallthrough
     case 26: prediction += coefficients[25] * (drflac_int64)pDecodedSamples[-26];
+    // intentional fallthrough
     case 25: prediction += coefficients[24] * (drflac_int64)pDecodedSamples[-25];
+    // intentional fallthrough
     case 24: prediction += coefficients[23] * (drflac_int64)pDecodedSamples[-24];
+    // intentional fallthrough
     case 23: prediction += coefficients[22] * (drflac_int64)pDecodedSamples[-23];
+    // intentional fallthrough
     case 22: prediction += coefficients[21] * (drflac_int64)pDecodedSamples[-22];
+    // intentional fallthrough
     case 21: prediction += coefficients[20] * (drflac_int64)pDecodedSamples[-21];
+    // intentional fallthrough
     case 20: prediction += coefficients[19] * (drflac_int64)pDecodedSamples[-20];
+    // intentional fallthrough
     case 19: prediction += coefficients[18] * (drflac_int64)pDecodedSamples[-19];
+    // intentional fallthrough
     case 18: prediction += coefficients[17] * (drflac_int64)pDecodedSamples[-18];
+    // intentional fallthrough
     case 17: prediction += coefficients[16] * (drflac_int64)pDecodedSamples[-17];
+    // intentional fallthrough
     case 16: prediction += coefficients[15] * (drflac_int64)pDecodedSamples[-16];
+    // intentional fallthrough
     case 15: prediction += coefficients[14] * (drflac_int64)pDecodedSamples[-15];
+    // intentional fallthrough
     case 14: prediction += coefficients[13] * (drflac_int64)pDecodedSamples[-14];
+    // intentional fallthrough
     case 13: prediction += coefficients[12] * (drflac_int64)pDecodedSamples[-13];
+    // intentional fallthrough
     case 12: prediction += coefficients[11] * (drflac_int64)pDecodedSamples[-12];
+    // intentional fallthrough
     case 11: prediction += coefficients[10] * (drflac_int64)pDecodedSamples[-11];
+    // intentional fallthrough
     case 10: prediction += coefficients[ 9] * (drflac_int64)pDecodedSamples[-10];
+    // intentional fallthrough
     case  9: prediction += coefficients[ 8] * (drflac_int64)pDecodedSamples[- 9];
+    // intentional fallthrough
     case  8: prediction += coefficients[ 7] * (drflac_int64)pDecodedSamples[- 8];
+    // intentional fallthrough
     case  7: prediction += coefficients[ 6] * (drflac_int64)pDecodedSamples[- 7];
+    // intentional fallthrough
     case  6: prediction += coefficients[ 5] * (drflac_int64)pDecodedSamples[- 6];
+    // intentional fallthrough
     case  5: prediction += coefficients[ 4] * (drflac_int64)pDecodedSamples[- 5];
+    // intentional fallthrough
     case  4: prediction += coefficients[ 3] * (drflac_int64)pDecodedSamples[- 4];
+    // intentional fallthrough
     case  3: prediction += coefficients[ 2] * (drflac_int64)pDecodedSamples[- 3];
+    // intentional fallthrough
     case  2: prediction += coefficients[ 1] * (drflac_int64)pDecodedSamples[- 2];
+    // intentional fallthrough
     case  1: prediction += coefficients[ 0] * (drflac_int64)pDecodedSamples[- 1];
     }
 #endif
