# Check if NEON/SSE/AVX instructions are available on the machine where
# the project is compiled.

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
   EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)

   STRING(REGEX REPLACE "^.*(asimd).*$" "\\1" ASIMD_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "asimd" "${ASIMD_THERE}" ASIMD_TRUE)
   if(ASIMD_TRUE)
      set(ASIMD_FOUND true CACHE BOOL "NEON64 available on host")
   else (ASIMD_TRUE)
      STRING(REGEX REPLACE "^.*(neon).*$" "\\1" NEON_THERE "${CPUINFO}")
      STRING(COMPARE EQUAL "neon" "${NEON_THERE}" NEON_TRUE)
      if(NEON_TRUE)
         set(NEON_FOUND true CACHE BOOL "NEON available on host")
      else (NEON_TRUE)
         set(NEON_FOUND false CACHE BOOL "NEON available on host")
      endif (NEON_TRUE)
   endif(ASIMD_TRUE)

   STRING(REGEX REPLACE "^.*(sse2).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "sse2" "${SSE_THERE}" SSE2_TRUE)
   if(SSE2_TRUE)
      set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
   else (SSE2_TRUE)
      set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
   endif (SSE2_TRUE)

   # /proc/cpuinfo apparently omits sse3 :(
   STRING(REGEX REPLACE "^.*[^s](sse3).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "sse3" "${SSE_THERE}" SSE3_TRUE)
   if(NOT SSE3_TRUE)
      STRING(REGEX REPLACE "^.*(T2300).*$" "\\1" SSE_THERE "${CPUINFO}")
      STRING(COMPARE EQUAL "T2300" "${SSE_THERE}" SSE3_TRUE)
   endif (NOT SSE3_TRUE)

   STRING(REGEX REPLACE "^.*(ssse3).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "ssse3" "${SSE_THERE}" SSSE3_TRUE)
   if(SSE3_TRUE OR SSSE3_TRUE)
      set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
   else (SSE3_TRUE OR SSSE3_TRUE)
      set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
   endif (SSE3_TRUE OR SSSE3_TRUE)
   if(SSSE3_TRUE)
      set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
   else (SSSE3_TRUE)
      set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
   endif (SSSE3_TRUE)

   STRING(REGEX REPLACE "^.*(sse4_1).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "sse4_1" "${SSE_THERE}" SSE41_TRUE)
   if(SSE41_TRUE)
      set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
   else (SSE41_TRUE)
      set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   endif (SSE41_TRUE)

   STRING(REGEX REPLACE "^.*(avx).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "avx" "${SSE_THERE}" AVX_TRUE)
   if(AVX_TRUE)
      set(AVX_FOUND true CACHE BOOL "AVX available on host")
   else (AVX_TRUE)
      set(AVX_FOUND false CACHE BOOL "AVX available on host")
   endif (AVX_TRUE)
 
   STRING(REGEX REPLACE "^.*(avx2).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "avx2" "${SSE_THERE}" AVX2_TRUE)
   if(AVX2_TRUE)
      set(AVX2_FOUND true CACHE BOOL "AVX2 available on host")
   else (AVX2_TRUE)
      set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
   endif (AVX2_TRUE)

elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
   EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_VARIABLE
      CPUINFO)

   STRING(REGEX REPLACE "^.*(ASIMD).*$" "\\1" ASIMD_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "ASIMD" "${ASIMD_THERE}" ASIMD_TRUE)
   if(ASIMD_TRUE)
      set(ASIMD_FOUND true CACHE BOOL "NEON64 available on host")
   else (ASIMD_TRUE)
	   STRING(REGEX REPLACE "^.*(NEON).*$" "\\1" NEON_THERE "${CPUINFO}")
	   STRING(COMPARE EQUAL "NEON" "${NEON_THERE}" NEON_TRUE)
      if(NEON_TRUE)
         set(NEON_FOUND true CACHE BOOL "NEON available on host")
      else (NEON_TRUE)
         set(NEON_FOUND false CACHE BOOL "NEON available on host")
      endif (NEON_TRUE)
   endif(ASIMD_TRUE)

   STRING(REGEX REPLACE "^.*[^S](SSE2).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "SSE2" "${SSE_THERE}" SSE2_TRUE)
   if(SSE2_TRUE)
      set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
   else (SSE2_TRUE)
      set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
   endif (SSE2_TRUE)

   STRING(REGEX REPLACE "^.*[^S](SSE3).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "SSE3" "${SSE_THERE}" SSE3_TRUE)
   if(SSE3_TRUE)
      set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
   else (SSE3_TRUE)
      set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
   endif (SSE3_TRUE)

   STRING(REGEX REPLACE "^.*(SSSE3).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "SSSE3" "${SSE_THERE}" SSSE3_TRUE)
   if(SSSE3_TRUE)
      set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
   else (SSSE3_TRUE)
      set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
   endif (SSSE3_TRUE)

   STRING(REGEX REPLACE "^.*(SSE4.1).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "SSE4.1" "${SSE_THERE}" SSE41_TRUE)
   if(SSE41_TRUE)
      set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
   else (SSE41_TRUE)
      set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   endif (SSE41_TRUE)

   STRING(REGEX REPLACE "^.*(AVX).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "AVX" "${SSE_THERE}" AVX_TRUE)
   if(AVX_TRUE)
      set(AVX_FOUND true CACHE BOOL "AVX available on host")
   else (AVX_TRUE)
      set(AVX_FOUND false CACHE BOOL "AVX available on host")
   endif (AVX_TRUE)

   STRING(REGEX REPLACE "^.*(AVX2).*$" "\\1" SSE_THERE "${CPUINFO}")
   STRING(COMPARE EQUAL "AVX2" "${SSE_THERE}" AVX2_TRUE)
   if(AVX2_TRUE)
      set(AVX2_FOUND true CACHE BOOL "AVX2 available on host")
   else (AVX2_TRUE)
      set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
   endif (AVX2_TRUE)

elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
   # TODO
   set(NEON_FOUND   false CACHE BOOL "NEON available on host")
   set(ASIMD_FOUND  true  CACHE BOOL "NEON64 available on host")
   set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
   set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
   set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
   set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   set(AVX_FOUND false CACHE BOOL "AVX available on host")
   set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
else(CMAKE_SYSTEM_NAME MATCHES "Linux")
   set(NEON_FOUND   false CACHE BOOL "NEON available on host")
   set(ASIMD_FOUND  true  CACHE BOOL "NEON64 available on host")
   set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
   set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
   set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
   set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
   set(AVX_FOUND false CACHE BOOL "AVX available on host")
   set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
endif(CMAKE_SYSTEM_NAME MATCHES "Linux")

if(NOT NEON_FOUND)
   if(NOT ASIMD_FOUND)
      MESSAGE(STATUS "Could not find hardware support for NEON on this machine.")
   endif(NOT ASIMD_FOUND)
endif(NOT NEON_FOUND)
if(NOT SSE2_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE2 on this machine.")
endif(NOT SSE2_FOUND)
if(NOT SSE3_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE3 on this machine.")
endif(NOT SSE3_FOUND)
if(NOT SSSE3_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSSE3 on this machine.")
endif(NOT SSSE3_FOUND)
if(NOT SSE4_1_FOUND)
      MESSAGE(STATUS "Could not find hardware support for SSE4.1 on this machine.")
endif(NOT SSE4_1_FOUND)
if(NOT AVX_FOUND)
      MESSAGE(STATUS "Could not find hardware support for AVX on this machine.")
endif(NOT AVX_FOUND)
if(NOT AVX2_FOUND)
      MESSAGE(STATUS "Could not find hardware support for AVX2 on this machine.")
endif(NOT AVX2_FOUND)

mark_as_advanced(ASIMD_FOUND NEON_FOUND SSE2_FOUND SSE3_FOUND SSSE3_FOUND SSE4_1_FOUND, AVX_FOUND, AVX2_FOUND)
