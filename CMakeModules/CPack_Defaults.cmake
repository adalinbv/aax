
# detect system type
IF(NOT DEFINED CPACK_SYSTEM_NAME)
  SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)

# Default to release build type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF(NOT CMAKE_BUILD_TYPE)

# Set default libdir
IF(NOT DEFINED CMAKE_INSTALL_LIBDIR)
  SET(CMAKE_INSTALL_LIBDIR "lib")
ENDIF(NOT DEFINED CMAKE_INSTALL_LIBDIR)

# Set default bindir
IF(NOT DEFINED CMAKE_INSTALL_BINDIR)
  SET(CMAKE_INSTALL_BINDIR "bin")
ENDIF(NOT DEFINED CMAKE_INSTALL_BINDIR)

# read 'version' file into a variable (stripping any newlines or spaces)
FILE(READ version versionFile)
STRING(STRIP ${versionFile} AAX_VERSION)
SET(VERSION AAX_VERSION)

# split version string into components, note CMAKE_MATCH_0 is the entire regexp match
STRING(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9]+)" CPACK_PACKAGE_VERSION ${AAX_VERSION})

IF (UNIX AND NOT WIN32)
  IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CPACK_PACKAGE_ARCHITECTURE "x86_64")
  ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CPACK_PACKAGE_ARCHITECTURE "i386")
  ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

  If(NOT DEFINED CMAKE_LIBRARY_ARCHITECTURE)
     SET(CMAKE_LIBRARY_ARCHITECTURE "${CPACK_PACKAGE_ARCHITECTURE}-linux-gnu")
  ENDIF(NOT DEFINED CMAKE_LIBRARY_ARCHITECTURE)
ENDIF(UNIX AND NOT WIN32)

SET(CMAKE_INSTALL_LIBDIR lib/${CMAKE_LIBRARY_ARCHITECTURE} CACHE PATH "Output directory for libraries")

SET(CPACK_PACKAGE_NAME "${PACKAGE}")
SET(CPACK_PACKAGE_VENDOR "Adalin B.V.")
SET(CPACK_PACKAGE_CONTACT "tech@adalin.org")
SET(CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1})
SET(CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2})
SET(CPACK_PACKAGE_VERSION_PATCH ${CMAKE_MATCH_3})

#  read 'description` file into a variable
file(STRINGS description descriptionFile)
STRING(REGEX REPLACE "; \\.?" "\n" rpmDescription "${descriptionFile}")
STRING(REGEX REPLACE ";" "\n" debDescription "${descriptionFile}")

IF(WIN32)
  IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    SET(CMAKE_INSTALL_PREFIX "AeonWave")
  ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

  SET(CPACK_PACKAGE_FILE_NAME "${PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PACKAGE_NAME}")
  SET(CPACK_GENERATOR NSIS)

ELSE(WIN32)
  SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.el6.${CPACK_PACKAGE_ARCHITECTURE}")
  SET(CPACK_GENERATOR "DEB;RPM")

  # DEBIAN
  IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")
  ELSE (CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "i386")
  ENDIF (CMAKE_SIZEOF_VOID_P EQUAL 8)
  SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION ${debDescription})
  SET(CPACK_DEBIAN_PACKAGE_PREDEPENDS "multiarch-support")
  SET(CPACK_DEBIAN_COMPONENT_INSTALL ON)

  # RPM
  SET(CPACK_RPM_PACKAGE_ARCHITECTURE ${PACK_PACKAGE_ARCHITECTURE})
  SET(CPACK_RPM_PACKAGE_DESCRIPTION ${rpmDescription})
  SET(CPACK_RPM_CHANGELOG_FILE "${CMAKE_SOURCE_DIR}/ChangeLog")
  SET(CPACK_RPM_COMPONENT_INSTALL ON)
ENDIF(WIN32)

# ZIP
SET(CPACK_SOURCE_GENERATOR ZIP)
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${AAX_VERSION}" CACHE INTERNAL "tarball basename")
SET(CPACK_SOURCE_IGNORE_FILES
    "^${PROJECT_SOURCE_DIR}/.git;\\\\.gitignore;Makefile.am;~$;${CPACK_SOURCE_IGNORE_FILES}")

