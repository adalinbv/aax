/* -*-c++-*-
 *
 * SPDX-FileCopyrightText: Copyright © 2015-2024 by Erik Hofman.
 * SPDX-FileCopyrightText: Copyright © 2015-2024 by Adalin B.V.
 *
 * Package Name: AeonWave Audio eXtentions library.
 *
 * SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only
 *                          WITH Universal-FOSS-exception-1.0
 */

#pragma once

#include <map>
#include <type_traits>
#include <functional>
#include <algorithm>
#include <iostream>
#include <utility>
#include <memory>
#include <vector>
#include <cstring>	// strstr

#include <aax/matrix>
#include <aax/aax.h>


namespace aeonwave
{

namespace math
{
static float e1 = expf(1.0f);
static float inv_e = 1.0f/e1;

inline float exp(float v) { return powf(v, e1); }
inline float ln(float v) { return powf(v, inv_e); }
inline float pow(float v) { return powf(v, 10.0f); }
inline float log(float v) { return powf(v, 0.1f); }
inline float lin2log(float v) { return log10f(v); }
inline float log2lin(float v) { return powf(10.0f, v); }
inline float db2lin(float v) { return powf(10.0f, v/20.0f); }
inline float lin2db(float v) { return 20.0f*log10f(std::max<float>(v, 1e-9f)); }

static float level_60dB = db2lin(-60.0f);
static float level_96dB = db2lin(-96.0f);
static float level_128dB = db2lin(-128.0f);

}; // namespace math

inline unsigned major_version() {
    return aaxGetByType(AAX_VERSION_MAJOR);
}
inline unsigned minor_version() {
    return aaxGetByType(AAX_VERSION_MINOR);
}
inline unsigned int patch_level() {
    return aaxGetByType(AAX_RELEASE_NUMBER);
}

inline unsigned bits_per_sample(enum aaxFormat fmt) {
    return aaxGetBitsPerSample(fmt);
}
inline unsigned bytes_per_sample(enum aaxFormat fmt) {
    return aaxGetBytesPerSample(fmt);
}

inline enum aaxErrorType error_no() {
    return aaxGetErrorNo();
}
inline const char* strerror(enum aaxErrorType e=error_no()) {
    return aaxGetErrorString(e);
}

inline enum aaxType type(const char *s, enum aaxTypeName type) {
    return aaxType(aaxGetByName(s, type));
}

inline char* type(int type, enum aaxTypeName name) {
    return aaxGetStringByType(type, name);
}

inline enum aaxType type(const char *s) {
    return aaxType(aaxGetByName(s, AAX_TYPE_NAME));
}

inline char* type(int type) {
    return aaxGetStringByType(type, AAX_TYPE_NAME);
}

inline enum aaxSourceType source_type(const char *s) {
    return aaxSourceType(aaxGetByName(s, AAX_SOURCE_NAME));
}

inline char* source_type(int type) {
    return aaxGetStringByType(type, AAX_SOURCE_NAME);
}

inline enum aaxSourceType filter_type(const char *s) {
    return aaxSourceType(aaxGetByName(s, AAX_FILTER_NAME));
}

inline char* filter_type(int type) {
    return aaxGetStringByType(type, AAX_FILTER_NAME);
}

inline enum aaxSourceType effect_type(const char *s) {
    return aaxSourceType(aaxGetByName(s, AAX_EFFECT_NAME));
}

inline char* effect_type(int type) {
    return aaxGetStringByType(type, AAX_EFFECT_NAME);
}

inline enum aaxProcessingType processing_type(const char *s) {
    return aaxProcessingType(aaxGetByName(s, AAX_PROCESSING_NAME));
}

inline char* processing_type(enum aaxProcessingType type) {
    return aaxGetStringByType(type, AAX_PROCESSING_NAME);
}

inline enum aaxMIDIModulationMode modulation_type(const char *s) {
    return aaxMIDIModulationMode(aaxGetByName(s, AAX_MODULATION_NAME));
}

inline char* modulation_type(int type) {
    return aaxGetStringByType(type, AAX_MODULATION_NAME);
}

inline enum aaxSourceType frequency_filter_type(const char *s) {
    return aaxSourceType(aaxGetByName(s, AAX_FREQUENCY_FILTER_NAME));
}

inline char* frequency_filter_type(int type) {
    return aaxGetStringByType(type, AAX_FREQUENCY_FILTER_NAME);
}

inline enum aaxDistanceModel distance_model(const char *s) {
    return aaxDistanceModel(aaxGetByName(s, AAX_DISTANCE_MODEL_NAME));
}

inline char* distance_model(int type) {
    return aaxGetStringByType(type, AAX_DISTANCE_MODEL_NAME);
}


inline bool is_valid(void* c, enum aaxHandleType t=AAX_CONFIG) {
    return aaxIsValid(c, t);
}

inline void free(void *ptr) {
    aaxFree(ptr);
}


union dsp_t
{
    dsp_t(enum aaxFilterType f=AAX_FILTER_NONE) : filter(f) {};
    dsp_t(enum aaxEffectType e) : effect(e) {};
    enum aaxFilterType filter;
    enum aaxEffectType effect;
    int eftype; // either filter or effect
};

using set_filter_t = bool(void*, aaxFilter);
using set_effect_t = bool(void*, aaxEffect);
using get_filter_t = aaxFilter(void*, aaxFilterType);
using get_effect_t = aaxEffect(void*, aaxEffectType);

template <typename T>
class Tieable
{
public:
    Tieable() = delete;

    virtual ~Tieable() { untie(); }

    Tieable(T v, enum aaxType t = AAX_LINEAR) : val(v), cvt_type(t) { fire(); }

    Tieable(const Tieable& v) { val = v.val; fire(); }

    Tieable(Tieable&&) = default;
    Tieable& operator=(Tieable&&) = default;

    friend std::ostream& operator<<(std::ostream& os, const Tieable& v) {
        os << v.val;
        return os;
    }

    // type operators
    T operator+(T v) { return (val + v); }
    T operator-(T v) { return (val - v); }
    T operator*(T v) { return (val * v); }
    T operator/(T v) { return (val / v); }

    T operator=(T v) { val = v; fire(); return val; }
    T operator+=(T v) { val += v; fire(); return val; }
    T operator-=(T v) { val -= v; fire(); return val; }
    T operator*=(T v) { val *= v; fire(); return val; }
    T operator/=(T v) { val /= v; fire(); return val; }

    bool operator==(T v) { return (val == v); }
    bool operator!=(T v) { return (val != v); }
    bool operator<(T v) { return (val < v); }
    bool operator>(T v) { return (val > v); }
    bool operator<=(T v) { return (val <= v); }
    bool operator>=(T v) { return (val >= v); }

    // Tieable operators
    Tieable operator-() { return -val; }
    Tieable operator+(const Tieable& v) { return (val + v.val); }
    Tieable operator-(const Tieable& v) { return (val - v.val); }
    Tieable operator*(const Tieable& v) { return (val * v.val); }
    Tieable operator/(const Tieable& v) { return (val / v.val); }

    Tieable operator=(const Tieable& v) {
        val = v.val; fire(); return val;
    }
    Tieable operator+=(const Tieable& v) {
        val += v.val; fire(); return val;
    }
    Tieable operator-=(const Tieable& v) {
        val -= v.val; fire(); return val;
    }
    Tieable operator*=(const Tieable& v) {
        val *= v.val; fire(); return val;
    }
    Tieable operator/=(const Tieable& v) {
        val /= v.val; fire(); return val;
    }

    bool operator==(const Tieable& v) { return (val == v.val); }
    bool operator!=(const Tieable& v) { return (val != v.val); }
    bool operator<(const Tieable& v) { return (val < v.val); }
    bool operator>(const Tieable& v) { return (val > v.val); }
    bool operator<=(const Tieable& v) { return (val <= v.val); }
    bool operator>=(const Tieable& v) { return (val >= v.val); }

    operator const T*() const { return &val; }
    operator T() { return val; }

    template<class C>
    bool tie(set_filter_t sfn, get_filter_t gfn, C& o, aaxFilterType f, int p) {
        if (!tied) {
            set.filter = sfn; get.filter = gfn;
            obj = o; dsptype.filter = f; param = p;
            filter = true; tied = enabled = true;
            handle.filter = aaxDSP(o.filter_get(f));
            fire(); return true;
        }
        return false;
    }
    template<class C>
    bool tie(set_effect_t sfn, get_effect_t gfn, C& o, aaxEffectType e, int p) {
        if (!tied) {
            set.effect = sfn; get.effect = gfn;
            obj = o; dsptype.effect = e; param = p;
            filter = false; tied = enabled = true;
            handle.effect = aaxDSP(o.effect_get(e));
            fire(); return true;
        }
        return false;
    }
    void untie() { tied = false; }

    int type() { return dsptype.eftype; }
    bool is_filter() { return filter; }

protected:
    void fire() {
        if (!tied || val == prev) return;
        if (filter) {
            if (std::is_same<T, float>::value) {
                if (aaxFilterSetParam(handle.filter, param, cvt_type, val)) {
                    set.filter(obj, handle.filter);
                }
            } else if (std::is_same<T, uint64_t>::value) {
                if (aaxFilterSetState(handle.filter, val)) {
                    set.filter(obj, handle.filter);
                }
                enabled = tied;
            }
        } else { // effect
            if (std::is_same<T, float>::value) {
                if (aaxEffectSetParam(handle.effect, param, cvt_type, val)) {
                    set.effect(obj, handle.effect);
                }
            } else if (std::is_same<T, uint64_t>::value) {
                if (aaxEffectSetState(handle.effect, val)) {
                    set.effect(obj, handle.effect);
                }
                enabled = tied;
            }
        }
        prev = val;
    }

private:
    T val = 0;
    T prev = -1;
    enum aaxType cvt_type = AAX_LINEAR;
    bool tied = 0;
    int param = 0;
    bool filter = true;
    bool enabled = false;
    aaxDSP obj = nullptr;

    union handle {
        aaxFilter filter = nullptr;
        aaxEffect effect;
    } handle;
    union setter {
        set_filter_t* filter = nullptr;
        set_effect_t* effect;
    } set;
    union getter {
        get_filter_t* filter = nullptr;
        get_effect_t* effect;
    } get;
    union dsp_t dsptype;
};
using Param = Tieable<float>;
using Status = Tieable<uint64_t>;


template <typename T>
class Obj
{
private:
    template <typename DSP>
    struct obj_dsp
    {
        DSP dsp;
        std::vector<Param*> fties;
        Status* status;
    };

public:
    using stop_fn = std::function<bool(T, enum aaxState)>;
    using close_fn = std::function<bool(T)>;

    Obj() = default;

    virtual ~Obj() {
        if (!!stopfn) stopfn(ptr, AAX_PROCESSED);
        if (!!closefn) closefn(ptr);
        for (auto it : fdsp) { aaxFilterDestroy(it.second.dsp); }
        for (auto it : edsp) { aaxEffectDestroy(it.second.dsp); }
    }

    Obj(T p, close_fn c) : ptr(p), closefn(c) {}

    Obj(T p, stop_fn s, close_fn c) : ptr(p), stopfn(s), closefn(c) {}

    Obj(const Obj&) = default;
    Obj(Obj&&) = default;

    Obj& operator=(const Obj&) = default;
    Obj& operator=(Obj&&) = default;

    bool close() {
        if (!!stopfn) stopfn(ptr, AAX_PROCESSED);
        bool rv = (!!closefn) ? closefn(ptr) : false;
        closefn = nullptr; stopfn = nullptr;
        return rv;
    }

    void ties_add(Param& pm, get_filter_t f, aaxFilterType t) {
        auto dsp = fdsp_get(t);
        if (!dsp.dsp) { fdsp_set(f(ptr, t), t); }
        auto pi = std::find(dsp.fties.begin(), dsp.fties.end(), &pm);
        if (pi == dsp.fties.end()) dsp.fties.push_back(&pm);
    }
    void ties_add(Param& pm, get_effect_t e, aaxEffectType t) {
        auto dsp = edsp_get(t);
        if (!dsp.dsp) { edsp_set(e(ptr, t), t); }
        auto pi = std::find(dsp.fties.begin(), dsp.fties.end(), &pm);
        if (pi == dsp.fties.end()) dsp.fties.push_back(&pm);
    }

    void ties_add(Status& pm, get_filter_t f, aaxFilterType t) {
        auto dsp = fdsp_get(t);
        if (!dsp.dsp) { fdsp_set(f(ptr, t), t); }
        dsp.status = &pm;
    }
    void ties_add(Status& pm, get_effect_t e, aaxEffectType t) {
        auto dsp = edsp_get(t);
        if (!dsp.dsp) { edsp_set(e(ptr, t), t); }
        dsp.status = &pm;
    }

    void untie(Param& pm) {
        auto dsp = pm.is_filter() ? fdsp_get(aaxFilterType(pm.type()))
                                  : edsp_get(aaxEffectType(pm.type()));
        auto pi = std::find(dsp.fties.begin(), dsp.fties.end(), &pm);
        if (pi != dsp.fties.end()) { dsp.fties.erase(pi); } pm.untie();
    }

    void untie(Status& pm) {
        auto dsp = pm.is_filter() ? fdsp_get(aaxFilterType(pm.type()))
                                  : edsp_get(aaxEffectType(pm.type()));
        dsp.status = nullptr; pm.untie();
    }

    void filter_set(aaxFilter f, int t) { fdsp_set(f, aaxFilterType(t)); }
    void effect_set(aaxEffect e, int t) { edsp_set(e, aaxEffectType(t)); }
    aaxFilter filter_get(aaxFilterType f) { return fdsp_get(f).dsp; }
    aaxEffect effect_get(aaxEffectType e) { return edsp_get(e).dsp; }

    operator T() const {
        return ptr;
    }

    explicit operator bool() {
        return !!ptr;
    }

protected:
    T ptr = nullptr;
    std::function<int(T, enum aaxState)> stopfn = nullptr;
    std::function<int(T)> closefn = nullptr;

private:
    void fdsp_set(aaxFilter f, aaxFilterType t) { fdsp[t].dsp = f; }
    void edsp_set(aaxEffect e, aaxEffectType t) { edsp[t].dsp = e; }
    obj_dsp<aaxFilter>& fdsp_get(aaxFilterType f) { return fdsp[f]; }
    obj_dsp<aaxEffect>& edsp_get(aaxEffectType e) { return edsp[e]; }

    std::map<enum aaxFilterType, obj_dsp<aaxFilter>> fdsp;
    std::map<enum aaxEffectType, obj_dsp<aaxEffect>> edsp;
};


class Buffer : public Obj<aaxBuffer>
{
public:
    Buffer() : Obj(aaxBufferCreate(NULL, 1, 1, AAX_PCM16S), aaxBufferDestroy) {
    }

    virtual ~Buffer() = default;

    Buffer(aaxBuffer b, bool o=true) : Obj(b, o ? aaxBufferDestroy : 0) {}

    Buffer(aaxConfig c, unsigned int n, unsigned int t, enum aaxFormat f)
        : Obj(aaxBufferCreate(c, n, t, f), aaxBufferDestroy),
          frequency(get(AAX_BASE_FREQUENCY)), fraction(getf(AAX_PITCH_FRACTION))
    {}

    Buffer(aaxConfig c, const std::string& n, bool o=true, bool s=false)
    {
        name = n;
        ptr = aaxBufferReadFromStream(c, n.c_str());
        if (!ptr) { aaxGetErrorNo();
            ptr = aaxBufferReadFromStream(c, aaxs_file(c, n.c_str()).c_str());
        }
        if (!ptr) { aaxGetErrorNo();
            ptr = aaxBufferReadFromStream(c, preset_file(c, n.c_str()).c_str());
        }
        if (!ptr && !s) { aaxGetErrorNo();
            ptr = aaxBufferCreate(c , 1, 1, AAX_PCM16S);
        }
        if (ptr && o) {
            closefn = aaxBufferDestroy;
        }
    }

    Buffer(aaxConfig c, const char *name, bool o=true, bool s=false)
        : Buffer(c, std::string(name), o, s) {}

    Buffer(const Buffer&) = default;
    Buffer(Buffer&&) = default;

    Buffer& operator=(const Buffer&) = default;
    Buffer& operator=(Buffer&&) = default;

    void set(aaxConfig c, unsigned int n, unsigned int t, enum aaxFormat f) {
        ptr = aaxBufferCreate(c, n, t, f); closefn = aaxBufferDestroy;
    }

    bool set(enum aaxSetupType t, int64_t s) {
        return aaxBufferSetSetup(ptr, t, s);
    }
//  bool set(enum aaxSetupType t, float s) {
//      return aaxBufferSetSetup(ptr, t, AAX_TO_INT(s));
//  }
    int64_t get(enum aaxSetupType t) {
        return aaxBufferGetSetup(ptr, t);
    }
    float getf(enum aaxSetupType t) {
        return AAX_TO_FLOAT(aaxBufferGetSetup(ptr, t));
    }
    bool fill(const void* d) {
        return aaxBufferSetData(ptr, d);
    }
    void** data() {
        return aaxBufferGetData(ptr);
    }

    // get the pitch of a given frequency against the buffer base frequency
    float get_pitch(float freq) {
        frequency = get(AAX_BASE_FREQUENCY);
        fraction = getf(AAX_PITCH_FRACTION);
        freq = (freq - frequency)*fraction + frequency;
        return freq/frequency;
    }

    const std::string& get_name() { return name; }

    bool is_valid() { return !!closefn; }

private:
    std::string preset_file(aaxConfig c, const char* name) {
        std::string rv = aaxDriverGetSetup(c, AAX_SHARED_DATA_DIR);
        rv.append("/"); rv.append(name);
        return rv;
    }

    std::string aaxs_file(aaxConfig c, const char* name) {
        std::string rv = aaxDriverGetSetup(c, AAX_SHARED_DATA_DIR);
        rv.append("/"); rv.append(name); rv.append(".aaxs");
        return rv;
    }

    std::string name;
    uint64_t frequency = 440;
    float fraction = 1.0f;
};

static Buffer nullBuffer;

class dsp : public Obj<aaxDSP>
{
public:
    dsp() = default;

    virtual ~dsp() = default;

    dsp(aaxConfig c, enum aaxFilterType f)
        : Obj(c, aaxFilterDestroy), filter(true), dsptype(f) {
        if (!aaxIsValid(c, AAX_FILTER)) ptr = aaxFilterCreate(c, f);
    }

    dsp(aaxFilter c, enum aaxFilterType f)
        : Obj(c, aaxFilterDestroy), filter(true), dsptype(f) {
        if (!aaxIsValid(c, AAX_FILTER)) ptr = aaxFilterCreate(c, f);
    }

    dsp(aaxConfig c, enum aaxEffectType e)
        : Obj(c, aaxEffectDestroy), filter(false), dsptype(e) {
        if (!aaxIsValid(c, AAX_EFFECT)) ptr = aaxEffectCreate(c, e);
    }

    dsp(aaxEffect c, enum aaxEffectType e)
        : Obj(c, aaxEffectDestroy), filter(false), dsptype(e) {
        if (!aaxIsValid(c, AAX_EFFECT)) ptr = aaxEffectCreate(c, e);
    }

    dsp(const dsp&) = delete;
    dsp(dsp&&) = default;

    dsp& operator=(const dsp&) = delete;
    dsp& operator=(dsp&&) = default;

    bool add(Buffer& b) {
        return (filter) ? aaxFilterAddBuffer(ptr, b) : aaxEffectAddBuffer(ptr, b);
    }

    bool set(uint64_t s) {
        return (filter) ? aaxFilterSetState(ptr, s) : aaxEffectSetState(ptr, s);
    }

    int64_t state() {
        return (filter) ? aaxFilterGetState(ptr) : aaxEffectGetState(ptr);
    }

    bool set(unsigned s, float p1, float p2, float p3, float p4, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterSetSlot(ptr, s, t, p1, p2, p3, p4)
                        : aaxEffectSetSlot(ptr, s, t, p1, p2, p3, p4);
    }
    bool get(unsigned s, float* p1, float* p2, float* p3, float* p4, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterGetSlot(ptr, s, t, p1, p2, p3, p4)
                        : aaxEffectGetSlot(ptr, s, t, p1, p2, p3, p4);
    }
    bool set(unsigned s, Vector& v, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterSetSlotParams(ptr, s, t, v)
                        : aaxEffectSetSlotParams(ptr, s, t, v);
    }
    bool set(unsigned s, aaxVec4f v, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterSetSlotParams(ptr, s, t, v)
                        : aaxEffectSetSlotParams(ptr, s, t, v);
    }
    bool get(unsigned s, aaxVec4f v, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterGetSlotParams(ptr, s, t, v)
                        : aaxEffectGetSlotParams(ptr, s, t, v);
    }
    bool set(enum aaxParameter p, float v, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterSetParam(ptr, p, t, v)
                        : aaxEffectSetParam(ptr, p, t, v);
    }
    float get(enum aaxParameter p, enum aaxType t=AAX_LINEAR) {
        return (filter) ? aaxFilterGetParam(ptr, p, t)
                        : aaxEffectGetParam(ptr, p, t);
    }

    // ** support ******
    int type() { return dsptype.eftype; }
    bool is_filter() { return filter; }

private:
    bool filter = true;
    union dsp_t dsptype;
};


class Emitter : public Obj<aaxEmitter>
{
public:
    Emitter()
      : Obj(aaxEmitterCreate(), aaxEmitterSetState, aaxEmitterDestroy) {}

    Emitter(enum aaxEmitterMode m)
      : Obj(aaxEmitterCreate(), aaxEmitterSetState, aaxEmitterDestroy) {
        aaxEmitterSetMode(ptr, AAX_POSITION, m);
    }

    virtual ~Emitter() = default;

    Emitter(const Emitter&) = delete;
    Emitter(Emitter&&) = default;

    Emitter& operator=(const Emitter&) = delete;
    Emitter& operator=(Emitter&&) = default;

    bool set(enum aaxModeType t, int m) {
        return aaxEmitterSetMode(ptr, t, m);
    }
    int get(enum aaxModeType t) {
        return aaxEmitterGetMode(ptr, t);
    }
    bool set(enum aaxSetupType t, int64_t s) {
        return aaxEmitterSetSetup(ptr, t, s);
    }
//  bool set(enum aaxSetupType t, float s) {
//      return aaxEmitterSetSetup(ptr, t, AAX_TO_INT(s));
//  }
    int64_t get(enum aaxSetupType t) {
        return aaxEmitterGetSetup(ptr, t);
    }
    float getf(enum aaxSetupType t) {
        return AAX_TO_FLOAT(aaxEmitterGetSetup(ptr, t));
    }
    bool set(enum aaxState s) {
        return aaxEmitterSetState(ptr, s);
    }
    enum aaxState state() {
        return aaxState(aaxEmitterGetState(ptr));
    }

    // ** filters and effects ******
    bool set(dsp& dsp) {
        return dsp.is_filter() ? aaxEmitterSetFilter(ptr, dsp)
                               : aaxEmitterSetEffect(ptr, dsp);
    }
    dsp get(enum aaxFilterType f) {
        return dsp(aaxEmitterGetFilter(ptr, f), f);
    }
    dsp get(enum aaxEffectType e) {
        return dsp(aaxEmitterGetEffect(ptr, e), e);
    }

    template <typename T>
    bool tie(Tieable<T>& pm, enum aaxFilterType f, int p=0) {
        ties_add(pm, get_filter, f);
        return pm.tie(set_filter, get_filter, *this, f, p);
    }
    template <typename T>
    bool tie(Tieable<T>& pm, enum aaxEffectType e, int p=0) {
        ties_add(pm, get_effect, e);
        return pm.tie(set_effect, get_effect, *this, e, p);
    }

    // ** position and orientation ******
    bool matrix(Matrix64& m) {
        return aaxEmitterSetMatrix64(ptr, m);
    }
    bool get(Matrix64& m) {
        return aaxEmitterGetMatrix64(ptr, m);
    }
    bool velocity(Vector& v) {
        return aaxEmitterSetVelocity(ptr, v);
    }
    bool get(Vector& v) {
        return aaxEmitterGetVelocity(ptr, v);
    }

    // ** buffer handling ******
    bool add(Buffer& b) {
        return aaxEmitterAddBuffer(ptr, b);
    }
    bool remove_buffer() {
        return aaxEmitterRemoveBuffer(ptr);
    }
    Buffer get(unsigned int p, bool c=false) {
        return Buffer(aaxEmitterGetBufferByPos(ptr, p, c), !c);
    }
    unsigned int get(enum aaxState s) {
        return aaxEmitterGetNoBuffers(ptr, s);
    }
    bool offset(unsigned long o, enum aaxType t) {
        return aaxEmitterSetOffset(ptr, o, t);
    }
    bool offset(float o) {
        return aaxEmitterSetOffsetSec(ptr, o);
    }
    size_t offset(enum aaxType t) {
        return aaxEmitterGetOffset(ptr, t);
    }
    float offset() {
        return aaxEmitterGetOffsetSec(ptr);
    }
private:
    static bool set_filter(void* c, aaxFilter f) {
        return aaxEmitterSetFilter((aaxEmitter)c, f);
    }
    static aaxFilter get_filter(void* c, enum aaxFilterType f) {
       return aaxEmitterGetFilter((aaxEmitter)c, f);
    }
    static bool set_effect(void* c, aaxEffect e) {
        return aaxEmitterSetEffect((aaxEmitter)c, e);
    }
    static aaxEffect get_effect(void* c, enum aaxEffectType e) {
       return aaxEmitterGetEffect((aaxEmitter)c, e);
    }
};


class Sensor : public Obj<aaxConfig>
{
public:
    Sensor() { set_dsp(); }

    virtual ~Sensor() = default;

    explicit Sensor(aaxConfig c) : Obj(c, aaxMixerSetState, aaxDriverDestroy) {
       mode = aaxRenderMode(aaxMixerGetMode(c, AAX_RENDER_MODE));
       set_dsp();
    }

    explicit Sensor(const char* n, enum aaxRenderMode m=AAX_MODE_READ)
        : Sensor(aaxDriverOpenByName(n, m)) {}

    explicit Sensor(const std::string& s, enum aaxRenderMode m=AAX_MODE_READ)
        : Sensor(s.empty() ? nullptr : s.c_str(), m) {}

    Sensor(const Sensor&) = delete;
    Sensor(Sensor&&) = default;

    Sensor& operator=(const Sensor&) = delete;
    Sensor& operator=(Sensor&&) = default;

    int render_mode() {
        return aaxMixerGetMode(ptr, aaxModeType(0));
    }

    bool set(enum aaxSetupType t, int64_t s) {
        return aaxMixerSetSetup(ptr, t, s);
    }
//  bool set(enum aaxSetupType t, float s) {
//      return aaxMixerSetSetup(ptr, t, AAX_TO_INT(s));
//  }
    int64_t get(enum aaxSetupType t) {
        return aaxMixerGetSetup(ptr, t);
    }
    float getf(enum aaxSetupType t) {
        return AAX_TO_FLOAT(aaxMixerGetSetup(ptr, t));
    }

    bool set(enum aaxState s) {
        return aaxMixerSetState(ptr, s);
    }
    enum aaxState state() {
        return aaxState(aaxMixerGetState(ptr));
    }

    // ** driver ******
    bool get(enum aaxRenderMode m) {
        return aaxDriverGetSupport(ptr, m);
    }
    bool set(enum aaxSetupType t, const char* s) {
        return aaxDriverSetSetup(ptr, t, s);
    }
    const char* info(enum aaxSetupType t) {
        return aaxDriverGetSetup(ptr, t);
    }
    const char* info(enum aaxFilterType f) {
        return aaxFilterGetNameByType(ptr, f);
    }
    const char* info(enum aaxEffectType e) {
        return aaxEffectGetNameByType(ptr, e);
    }
    bool supports(enum aaxFilterType f) {
        return aaxIsFilterSupported(ptr, aaxFilterGetNameByType(ptr, f));
    }
    bool supports(enum aaxEffectType e) {
        return aaxIsEffectSupported(ptr, aaxEffectGetNameByType(ptr, e));
    }
    bool supports(const char* fe) {
        return aaxIsFilterSupported(ptr, fe) ? true
                                            : aaxIsEffectSupported(ptr, fe);
    }
    bool supports(const std::string& s) {
        return supports(s.c_str());
    }

    // ** filters and effects ******
    bool set(dsp& dsp) {
        return dsp.is_filter() ? aaxMixerSetFilter(ptr, dsp)
                               : aaxMixerSetEffect(ptr, dsp);
    }
    dsp get(enum aaxFilterType t) {
        aaxFilter f = aaxMixerGetFilter(ptr, t);
        return dsp(f, t);
    }
    dsp get(enum aaxEffectType t) {
        aaxEffect e = aaxMixerGetEffect(ptr, t);
        return dsp(e, t);
    }

    template <typename T>
    bool tie(Tieable<T>& pm, enum aaxFilterType f, int p=0) {
        ties_add(pm, get_filter, f);
        return pm.tie(set_filter, get_filter, *this, f, p);
    }
    template <typename T>
    bool tie(Tieable<T>& pm, enum aaxEffectType e, int p=0) {
        ties_add(pm, get_effect, e);
        return pm.tie(set_effect, get_effect, *this, e, p);
    }

    // ** position and orientation ******
    bool matrix(Matrix64& m) {
        return aaxSensorSetMatrix64(ptr, m);
    }
    bool get(Matrix64& m) {
        return aaxSensorGetMatrix64(ptr, m);
    }
    bool velocity(Vector& v) {
        return aaxSensorSetVelocity(ptr, v);
    }
    bool get(Vector& v) {
        return aaxSensorGetVelocity(ptr, v);
    }
    bool sensor(enum aaxState s) {
        return aaxSensorSetState(ptr, s);
    }

    // ** buffer handling (AAXS only) ******
    bool add(Buffer& b) {
        bool rv = aaxMixerAddBuffer(ptr, b);
        set_dsp();
        return rv;
    }

    // ** buffer handling ******
    bool wait(float t) {
        return aaxSensorWaitForBuffer(ptr, t);
    }
    Buffer buffer() {
        return Buffer(aaxSensorGetBuffer(ptr));
    }
    Buffer get_buffer() {
        return Buffer(aaxSensorGetBuffer(ptr));
    }

    // ** enumeration ******
    const char* device(unsigned d) {
        return aaxDriverGetDeviceNameByPos(ptr, d, mode);
    }
    const char* interface_name(int d, unsigned i) {
        const char* ed = device(d);
        return aaxDriverGetInterfaceNameByPos(ptr, ed, i, mode);
    }
    const char* interface_name(const char* d, unsigned i) {
        return aaxDriverGetInterfaceNameByPos(ptr, d, i, mode);
    }
    const char* interface_name(const std::string& d, unsigned i) {
        return aaxDriverGetInterfaceNameByPos(ptr, d.c_str(), i, mode);
    }

    // ** support ******
    const char* version() {
        return aaxGetString(AAX_VERSION_STRING);
    }

    enum aaxErrorType error_no() {
        return aaxDriverGetErrorNo(ptr);
    }
     const char* strerror() {
        return aaxGetErrorString(error_no());
    }

    size_t offset(enum aaxType t) {
        return aaxSensorGetOffset(ptr, t);
    }

protected:
    enum aaxRenderMode mode = AAX_MODE_READ;

private:
    void set_dsp()
    {
        for (int t=AAX_EQUALIZER; t<AAX_FILTER_MAX; ++t) {
            filter_set(aaxMixerGetFilter(ptr, aaxFilterType(t)), t);
        }
        for (int t=AAX_PITCH_EFFECT; t<AAX_EFFECT_MAX; ++t) {
            effect_set(aaxMixerGetEffect(ptr, aaxEffectType(t)), t);
        }
    }

    static bool set_filter(void* c, aaxFilter f) {
        return aaxMixerSetFilter((aaxConfig)c, f);
    }
    static aaxFilter get_filter(void* c, enum aaxFilterType f)  {
        return aaxMixerGetFilter((aaxConfig)c, f);
    }
    static bool set_effect(void* c, aaxEffect e) {
        return aaxMixerSetEffect((aaxConfig)c, e);
    }
    static aaxEffect get_effect(void* c, enum aaxEffectType e) {
        return aaxMixerGetEffect((aaxConfig)c, e);
    }
};


class Frame : public Obj<aaxFrame>
{
public:
    Frame() { set_dsp(); }

    virtual ~Frame() {
        for (size_t i=0; i<frames.size(); ++i) {
             aaxAudioFrameDeregisterAudioFrame(ptr, frames[i]);
        }
        for (size_t i=0; i<sensors.size(); ++i) {
             aaxAudioFrameDeregisterSensor(ptr, sensors[i]);
        }
        for (size_t i=0; i<emitters.size(); ++i) {
             aaxAudioFrameDeregisterEmitter(ptr, emitters[i]);
        }
    }

    Frame(aaxConfig c)
      : Obj(aaxAudioFrameCreate(c), aaxAudioFrameSetState, aaxAudioFrameDestroy)
    { set_dsp(); }

    Frame(const Frame&) = delete;
    Frame(Frame&&) = default;

    Frame& operator=(const Frame&) = delete;
    Frame& operator=(Frame&&) = default;

    bool set(enum aaxSetupType t, int64_t s) {
        return aaxAudioFrameSetSetup(ptr, t, s);
    }
//  bool set(enum aaxSetupType t, float s) {
//      return aaxAudioFrameSetSetup(ptr, t, AAX_TO_INT(s));
//  }
    int64_t get(enum aaxSetupType t) {
        return aaxAudioFrameGetSetup(ptr, t);
    }
    float getf(enum aaxSetupType t) {
        return AAX_TO_FLOAT(aaxAudioFrameGetSetup(ptr, t));
    }

    bool set(enum aaxState s) {
        return aaxAudioFrameSetState(ptr, s);
    }
    enum aaxState state() {
        return aaxState(aaxAudioFrameGetState(ptr));
    }
    bool set(enum aaxModeType t, int m) {
        return aaxAudioFrameSetMode(ptr, t, m);
    }
    int get(enum aaxModeType t) {
        return aaxAudioFrameGetMode(ptr, t);
    }

    // ** buffer handling (AAXS only) ******
    bool add(Buffer& b) {
        bool rv = aaxAudioFrameAddBuffer(ptr, b);
        set_dsp();
        return rv;
    }

    // ** filters and effects ******
    bool set(dsp& dsp) {
        return dsp.is_filter() ? aaxAudioFrameSetFilter(ptr, dsp)
                               : aaxAudioFrameSetEffect(ptr, dsp);
    }
    dsp get(enum aaxFilterType t) {
        return dsp(aaxAudioFrameGetFilter(ptr, t), t);
    }
    dsp get(enum aaxEffectType t) {
        return dsp(aaxAudioFrameGetEffect(ptr, t), t);
    }

    template <typename T>
    bool tie(Tieable<T>& pm, enum aaxFilterType f, int p=0) {
        ties_add(pm, get_filter, f);
        return pm.tie(set_filter, get_filter, *this, f, p);
    }
    template <typename T>
    bool tie(Tieable<T>& pm, enum aaxEffectType e, int p=0) {
        ties_add(pm, get_effect, e);
        return pm.tie(set_effect, get_effect, *this, e, p);
    }

    // ** sub-mixing ******
    bool add(Frame& m) {
        bool rv = aaxAudioFrameRegisterAudioFrame(ptr, m);
        if (rv) frames.push_back(m);
        return rv;
    }
    bool remove(Frame& m) {
        bool rv = false;
        auto fi = std::find(frames.begin(), frames.end(), m);
        if (fi != frames.end()) {
           rv = aaxAudioFrameDeregisterAudioFrame(ptr, m);
           frames.erase(fi);
        }
        return rv;
    }
    bool add(Sensor& s) {
        bool rv = aaxAudioFrameRegisterSensor(ptr, s);
        if (rv) sensors.push_back(s);
        return rv;
    }
    bool remove(Sensor& s) {
        bool rv = false;
        auto si = std::find(sensors.begin(), sensors.end(), s);
        if (si != sensors.end()) {
            rv = aaxAudioFrameDeregisterSensor(ptr, s);
            sensors.erase(si);
        }
        return rv;
    }
    bool add(Emitter& e) {
        bool rv = aaxAudioFrameRegisterEmitter(ptr, e);
        if (rv) emitters.push_back(e);
        return rv;
    }
    bool remove(Emitter& e) {
        bool rv = false;
        auto ei = std::find(emitters.begin(), emitters.end(), e);
        if (ei != emitters.end()) {
            rv = aaxAudioFrameDeregisterEmitter(ptr, e);
            ei = emitters.erase(ei);
        }
        return rv;
    }

    // ** position and orientation ******
    bool matrix(Matrix64& m) {
        return aaxAudioFrameSetMatrix64(ptr, m);
    }
    bool get(Matrix64& m) {
        return aaxAudioFrameGetMatrix64(ptr, m);
    }
    bool velocity(Vector& v) {
        return aaxAudioFrameSetVelocity(ptr, v);
    }
    bool get(Vector& v) {
        return aaxAudioFrameGetVelocity(ptr, v);
    }

    // ** buffer handling ******
    bool wait(float t) {
        return aaxAudioFrameWaitForBuffer(ptr, t);
    }
    Buffer buffer() {
        return Buffer(aaxAudioFrameGetBuffer(ptr));
    }

private:
    void set_dsp()
    {
        for (int t=AAX_EQUALIZER; t<AAX_FILTER_MAX; ++t) {
            filter_set(aaxAudioFrameGetFilter(ptr, aaxFilterType(t)), t);
        }
        for (int t=AAX_PITCH_EFFECT; t<AAX_EFFECT_MAX; ++t) {
            effect_set(aaxAudioFrameGetEffect(ptr, aaxEffectType(t)), t);
        }
    }

    static bool set_filter(void* c, aaxFilter f) {
        return aaxAudioFrameSetFilter((aaxFrame)c, f);
    }
    static aaxFilter get_filter(void* c, enum aaxFilterType f) {
       return aaxAudioFrameGetFilter((aaxFrame)c, f);
    }
    static bool set_effect(void* c, aaxEffect e) {
        return aaxAudioFrameSetEffect((aaxFrame)c, e);
    }
    static aaxEffect get_effect(void* c, enum aaxEffectType e) {
       return aaxAudioFrameGetEffect((aaxFrame)c, e);
    }

    std::vector<aaxFrame> frames;
    std::vector<aaxConfig> sensors;
    std::vector<aaxEmitter> emitters;
};
using Mixer = Frame;


class AeonWave : public Sensor
{
private:
    struct SharedBufferPtr final {
        SharedBufferPtr() = delete;
        ~SharedBufferPtr() = default;

        SharedBufferPtr(Buffer *b)
          : buffer(std::shared_ptr<Buffer>(b,
                             [](Buffer *b){ aaxBufferDestroy(*b); delete b; })),
            refcount(1)
        {}

        std::shared_ptr<Buffer> buffer;
        int refcount = 0;
    };

public:
   AeonWave() = default;

   virtual ~AeonWave() {
        for (size_t i=0; i<frames.size(); ++i) {
             aaxMixerDeregisterAudioFrame(ptr, frames[i]);
        }
        for (size_t i=0; i<sensors.size(); ++i) {
             aaxMixerDeregisterSensor(ptr, sensors[i]);
        }
        for (size_t i=0; i<emitters.size(); ++i) {
             aaxMixerDeregisterEmitter(ptr, emitters[i]);
        }
        buffers.clear();
    }

   explicit AeonWave(aaxConfig c)
        : Sensor(c) {}

   explicit AeonWave(const char* n, enum aaxRenderMode m=AAX_MODE_WRITE_STEREO)
        : Sensor(n, m) {}

    explicit AeonWave(const std::string& s, enum aaxRenderMode m=AAX_MODE_WRITE_STEREO)
        : AeonWave(s.empty() ? nullptr : s.c_str(), m) {}

    explicit AeonWave(enum aaxRenderMode m)
        : Sensor(nullptr, m) {}

    AeonWave(const AeonWave&) = delete;
    AeonWave(AeonWave&&) = default;

    AeonWave& operator=(const AeonWave&) = delete;
    AeonWave& operator=(AeonWave&&) = default;

    // ** position and orientation ******
    bool sensor_matrix(Matrix64& m) {
        return matrix(m);
    }
    bool sensor_velocity(Vector& v) {
        return velocity(v);
    }

    // ** enumeration ******
    const char* drivers(enum aaxRenderMode m=AAX_MODE_WRITE_STEREO) {
        aaxDriverDestroy(_ec); if (m != _em) _e[0] = 0;
        _em = m; _ec = nullptr; _e[1] = 0; _e[2] = 0;
        if (_e[0] < aaxDriverGetCount(_em)) {
            _ec = aaxDriverGetByPos(_e[0]++, _em);
        }  else _e[0] = 0;
        return aaxDriverGetSetup(_ec, AAX_NAME_STRING);
    }
    const char* devices(bool c_str=false) {
        _e[2] = 0; _ed = nullptr;
        if (_e[1]++ < aaxDriverGetDeviceCount(_ec, _em)) {
            _ed = aaxDriverGetDeviceNameByPos(_ec, _e[1]-1, _em);
        }
        return _ed;
    }
    const char* interfaces(bool c_str=false) {
        const char *ifs = nullptr;
        if (_e[2]++ < aaxDriverGetInterfaceCount(_ec, _ed, _em)) {
            ifs = aaxDriverGetInterfaceNameByPos(_ec, _ed, _e[2]-1, _em);
        }
        return ifs;
    }

    // ** support ******
    size_t offset(enum aaxType t) {
        return aaxSensorGetOffset(ptr, t);
    }

    // ** mixing ******
    bool add(Frame& m) {
        bool rv = aaxMixerRegisterAudioFrame(ptr, m);
        if (rv) frames.push_back(m);
        return rv;
    }
    bool remove(Frame& m) {
        bool rv = false;
        auto fi = std::find(frames.begin(), frames.end(), m);
        if (fi != frames.end()) {
            rv = aaxMixerDeregisterAudioFrame(ptr, m);
            frames.erase(fi);
        }
        return rv;
    }
    bool add(Sensor& s) {
        bool rv = aaxMixerRegisterSensor(ptr, s);
        if (rv) sensors.push_back(s);
        return rv;
    }
    bool remove(Sensor& s) {
        bool rv = false;
        auto si = std::find(sensors.begin(), sensors.end(), s);
        if (si != sensors.end()) {
            rv = aaxMixerDeregisterSensor(ptr, s);
            sensors.erase(si);
        }
        return rv;
    }
    bool add(Emitter& e) {
        bool rv = aaxMixerRegisterEmitter(ptr, e);
        if (rv) emitters.push_back(e);
        return rv;
    }
    bool remove(Emitter& e) {
        bool rv = false;
        auto ei = std::find(emitters.begin(), emitters.end(), e);
        if (ei != emitters.end()) {
            rv = aaxMixerDeregisterEmitter(ptr, e);
            emitters.erase(ei);
        }
        return rv;
    }

    // ** buffer handling (AAXS only) ******
    bool add(Buffer& b) {
        return Sensor::add(b);
    }

    // ** buffer management ******
    // Get a shared buffer from the buffer cache if it's name is already
    // in the cache. Otherwise create a new one and add it to the cache.
    // The name can be an URL or a path to a file or just a reference-id.
    // In the case of an URL or a path the data is read automatically,
    // otherwise the application should add the audio-data itself.
    virtual Buffer& buffer(const std::string name, bool strict=false) {
        auto it = buffers.find(name);
        if (it == buffers.end()) {
            SharedBufferPtr buf(new Buffer(ptr, name, false, strict));
            auto ret = buffers.insert({name, buf});
            it = ret.first;
        }
        else {
            it->second.refcount++;
        }
        return *it->second.buffer;
    }
    virtual void destroy(Buffer& buf) {
        for(auto it=buffers.begin(); it!=buffers.end(); ++it) {
            if (*it->second.buffer == buf) {
                if (!--it->second.refcount) buffers.erase(it);
                break;
            }
        }
    }
    virtual bool buffer_avail(const std::string &name) {
        bool rv = false;
        auto it = buffers.find(name);
        if (it != buffers.end()) rv = true;
        return rv;
    }

    bool playback() {
       return aaxPlaySoundLogo(play.info(AAX_RENDERER_STRING));
    }

    // ** handles for a single background music stream ******
    // The name can be an URL or a path to a file.
    bool playback(const std::string name) {
        const std::string devname = std::string("AeonWave on Audio Files: ")+name;
        play = Sensor(devname, AAX_MODE_READ);
        return add(play) ? (play.set(AAX_INITIALIZED) ? play.sensor(AAX_CAPTURING) : false) : false;
    }

    bool stop() {
        return play.set(AAX_STOPPED);
    }

    bool playing() {
        return (play.state() == AAX_PLAYING);
    }

    float offset() {
        return (float)play.offset(AAX_SAMPLES)/(float)play.get(AAX_FREQUENCY);
    }

private:
    std::vector<aaxFrame> frames;
    std::vector<aaxConfig> sensors;
    std::vector<aaxEmitter> emitters;

    std::map<std::string, SharedBufferPtr> buffers;

    // background music stream
    Sensor play;

    // enumeration
    enum aaxRenderMode _em = AAX_MODE_WRITE_STEREO;
    unsigned int _e[3] = {0, 0, 0};
    const char* _ed = nullptr;
    aaxConfig _ec = nullptr;
};

} // namespace aax

