/*
 * Copyright 2005-2021 by Erik Hofman
 * Copyright 2007-2021 by Adalin B.V.
 *
 * This file is part of AeonWave
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  version 3 of the License.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef AAX_H
#define AAX_H 1

#if defined(__cplusplus)
extern "C" {
#endif

#if defined _WIN32 || defined __CYGWIN__
# define AAX_APIENTRY __cdecl
# ifdef AAX_BUILD_LIBRARY
#  define AAX_API __declspec(dllexport)
# else
#  define AAX_API __declspec(dllimport)
# endif
#else
# define AAX_APIENTRY
# if (__GNUC__ >= 4) || defined(__TINYC__)
#  define AAX_API __attribute__((visibility("default")))
# else
#  define AAX_API extern
# endif
#endif

#ifdef __GNUC__
#define DEPRECATED __attribute__ ((deprecated))
#elif defined(_MSC_VER)
#define DEPRECATED __declspec(deprecated)
#else
#define DEPRECATED
#pragma message("DEPRECATED is not defined for this compiler")
#endif

#if defined(TARGET_OS_MAC) && TARGET_OS_MAC
# pragma export on
#endif


#define AAX_MAJOR_VERSION	@AAX_MAJOR_VERSION@
#define AAX_MINOR_VERSION	@AAX_MINOR_VERSION@
#define AAX_MICRO_VERSION	@AAX_MICRO_VERSION@
#define AAX_PATCH_LEVEL		@AAX_PATCH_LEVEL@

#define AAX_FALSE		0
#define AAX_TRUE		1

#ifdef _MSC_VER
# include <float.h>
# pragma warning( disable : 4056 )
# define AAX_FPINFINITE		(FLT_MAX+FLT_MAX)
# define AAX_FPNONE		(AAX_FPINFINITE-AAX_FPINFINITE)
#else
# define AAX_FPNONE		(0.0f/0.0f)
# define AAX_FPINFINITE		(1.0f/0.0f)
# if defined(__GNUC__) || defined(__TINYC__)
# endif
#endif
#define AAX_PEAK_MAX		8388607

enum aaxHandleType
{
    AAX_NONE = 0,

    AAX_FILTER,
    AAX_EFFECT,
    AAX_CONFIG,
    AAX_AUDIOFRAME,
    AAX_EMITTER,
    AAX_BUFFER,
    AAX_HANDLE_TYPE_MAX
};

enum aaxTypeName
{
    AAX_ALL = -1,
    AAX_SOURCE_NAME,
    AAX_FILTER_NAME,
    AAX_EFFECT_NAME,
    AAX_DISTANCE_MODEL_NAME,
    AAX_TYPE_NAME,

    AAX_FREQUENCY_FILTER_NAME = 7 /* AAX_FREQUENCY_FILTER */
};

enum aaxFormat
{
   AAX_FORMAT_NONE = -1,

   /* native endianness */
   AAX_PCM8S = 0,		/* signed, 8-bits per sample             */
   AAX_PCM16S,			/* signed, 16-bits per sample            */
   AAX_PCM24S,			/* signed, 24-bits per sample in 32-bits */
   AAX_PCM32S,			/* signed, 32-bits per sample            */
   AAX_FLOAT,		/* 32-bit floating point, -1.0 to 1.0            */
   AAX_DOUBLE,		/* 64-bit floating point, -1.0 to 1.0            */
   AAX_MULAW,
   AAX_ALAW,
   AAX_IMA4_ADPCM,
   AAX_PCM24S_PACKED,		/* signed, packed 24-bits per sample     */
   AAX_FORMAT_MAX,
	
   AAX_FORMAT_NATIVE = 0x07F,	/* format mask */

   			/* the following formats get converted before use */
   AAX_FORMAT_UNSIGNED = 0x080,
   AAX_PCM8U = 0x080,		/* unsigned, 8-bits per sample             */
   AAX_PCM16U,			/* unsigned, 16-bits per sample            */
   AAX_PCM24U,			/* unsigned, 24-bits per sample in 32-bits */
   AAX_PCM32U,			/* unsigned, 32-bits per sample            */

   /* little endian */
   AAX_FORMAT_LE = 0x100,
   AAX_PCM16S_LE,
   AAX_PCM24S_LE,
   AAX_PCM32S_LE,
   AAX_FLOAT_LE,
   AAX_DOUBLE_LE,
   AAX_PCM24S_PACKED_LE = (AAX_FORMAT_LE|AAX_PCM24S_PACKED),

   AAX_FORMAT_LE_UNSIGNED = (AAX_FORMAT_LE | AAX_FORMAT_UNSIGNED),
   AAX_PCM16U_LE,
   AAX_PCM24U_LE,
   AAX_PCM32U_LE,

   /* big endian */
   AAX_FORMAT_BE = 0x200,
   AAX_PCM16S_BE,
   AAX_PCM24S_BE,
   AAX_PCM32S_BE,
   AAX_FLOAT_BE,
   AAX_DOUBLE_BE,
   AAX_PCM24S_PACKED_BE = (AAX_FORMAT_BE|AAX_PCM24S_PACKED),

   AAX_FORMAT_BE_UNSIGNED = (AAX_FORMAT_BE | AAX_FORMAT_UNSIGNED),
   AAX_PCM16U_BE,
   AAX_PCM24U_BE,
   AAX_PCM32U_BE,

   /** Unusual audio formats, the last bytes specifies the internal format **/
   AAX_SPECIAL = 0x80000,

   /* AeonWave Auto-generated XML Sound */
   AAX_AAXS = AAX_SPECIAL,
   AAX_AAXS16S = (AAX_AAXS | AAX_PCM16S),
   AAX_AAXS24S = (AAX_AAXS | AAX_PCM24S)
};

enum aaxType
{
   AAX_TYPE_NONE = 0,	
   AAX_LINEAR = AAX_TYPE_NONE,	/* volume */
   AAX_DECIBEL,
   AAX_RADIANS,			/* angles */
   AAX_DEGREES,
   AAX_BYTES,			/* offset */
   AAX_FRAMES,
   AAX_SAMPLES,
   AAX_MICROSECONDS,
   AAX_DEGREES_CELSIUS,		/* temperature */
   AAX_DEGREES_FAHRENHEIT,
   AAX_ATMOSPHERE,		/* pressure */
   AAX_BAR,
   AAX_POUNDS_PER_SQUARE_INCH,	AAX_PSI = AAX_POUNDS_PER_SQUARE_INCH,
   AAX_BITS_PER_SAMPLE, AAX_BPS = AAX_BITS_PER_SAMPLE,
   AAX_MILLISECONDS,
   AAX_SECONDS,
   AAX_TYPE_MAX,

   AAX_LOGARITHMIC = AAX_DECIBEL,
   AAX_KELVIN = AAX_LINEAR,
   AAX_KILOPASCAL = AAX_LINEAR,	AAX_KPA = AAX_LINEAR
};

enum aaxModeType
{
   AAX_MODE_TYPE_NONE = 0,
   AAX_POSITION,
   AAX_LOOPING,
   AAX_BUFFER_TRACK,
   AAX_RENDER_MODE,
   AAX_MODE_TYPE_MAX,
};

enum aaxTrackType
{
   AAX_TRACK_MIX = 0x40,
   AAX_TRACK_ALL = 0x80,

   AAX_TRACK0 = 0,
   AAX_TRACK_LEFT = AAX_TRACK0,
   AAX_TRACK_FRONT_LEFT = AAX_TRACK0,

   AAX_TRACK1 = 1,
   AAX_TRACK_RIGHT = AAX_TRACK1,
   AAX_TRACK_FRONT_RIGHT = AAX_TRACK1,

   AAX_TRACK2 = 2,
   AAX_TRACK_REAR_LEFT = AAX_TRACK2,

   AAX_TRACK3 = 3,
   AAX_TRACK_REAR_RIGHT = AAX_TRACK3,

   AAX_TRACK4 = 4,
   AAX_TRACK_CENTER = AAX_TRACK4,
   AAX_TRACK_CENTER_FRONT = AAX_TRACK4,

   AAX_TRACK5 = 5,
   AAX_TRACK_LFE = AAX_TRACK5,
   AAX_TRACK_SUBWOOFER = AAX_TRACK5,

   AAX_TRACK6 = 6,
   AAX_TRACK_SIDE_LEFT = AAX_TRACK6,

   AAX_TRACK7 = 7,
   AAX_TRACK_SIDE_RIGHT = AAX_TRACK7,

   AAX_TRACK_MAX
};

enum aaxSetupType
{
   AAX_SETUP_TYPE_NONE = 0,
   AAX_NAME_STRING,
   AAX_VERSION_STRING,
   AAX_RENDERER_STRING,
   AAX_VENDOR_STRING,
   AAX_FREQUENCY,
   AAX_TRACKS,
   AAX_FORMAT,
   AAX_REFRESH_RATE,
   AAX_TRACK_SIZE,
   AAX_NO_SAMPLES,
   AAX_LOOP_START,
   AAX_LOOP_END,
   AAX_MONO_EMITTERS,
   AAX_STEREO_EMITTERS,
   AAX_BLOCK_ALIGNMENT,
   AAX_AUDIO_FRAMES,
   AAX_UPDATE_RATE,
   AAX_LATENCY,
   AAX_TRACK_LAYOUT,
   AAX_BIT_RATE,
   AAX_FRAME_TIMING,
   AAX_SAMPLED_RELEASE,
   AAX_BUFFER_FILL,
   AAX_VERSION_MAJOR,
   AAX_VERSION_MINOR,
   AAX_VERSION_MICRO,
   AAX_RELEASE_NUMBER,
   AAX_ERROR_NUMBER,
   AAX_MAX_FILTER,
   AAX_MAX_EFFECT,
   AAX_BALANCE,
   AAX_SETUP_TYPE_MAX,

   AAX_PITCH_FRACTION = AAX_REFRESH_RATE,
   AAX_BASE_FREQUENCY = AAX_UPDATE_RATE,

   AAX_PEAK_VALUE             = 0x0100,
   AAX_AVERAGE_VALUE          = 0x0200,
   AAX_COMPRESSION_VALUE      = 0x0400,
   AAX_GATE_ENABLED           = 0x0800,

   /* mixer capabilities */
   AAX_SHARED_MODE            = 0x1000,
   AAX_TIMER_MODE,
   AAX_BATCHED_MODE,
   AAX_SEEKABLE_SUPPORT,
   AAX_CAPABILITIES,

   AAX_TRACKS_MIN             = 0x1200,
   AAX_TRACKS_MAX,
   AAX_PERIODS_MIN,
   AAX_PERIODS_MAX,
   AAX_FREQUENCY_MIN,
   AAX_FREQUENCY_MAX,
   AAX_SAMPLES_MAX,

   /* File and track information */
   AAX_COVER_IMAGE_DATA         = 0x2000,
   AAX_MUSIC_PERFORMER_STRING,
   AAX_MUSIC_GENRE_STRING,
   AAX_TRACK_TITLE_STRING,
   AAX_TRACK_NUMBER_STRING,
   AAX_ALBUM_NAME_STRING,
   AAX_RELEASE_DATE_STRING,
   AAX_COPYRIGHT_STRING,
   AAX_SONG_COPYRIGHT_STRING = AAX_COPYRIGHT_STRING,
   AAX_SONG_COMPOSER_STRING,
   AAX_SONG_COMMENT_STRING,
   AAX_ORIGINAL_PERFORMER_STRING,
   AAX_CONTACT_STRING,
   AAX_WEBSITE_STRING = AAX_CONTACT_STRING,

   AAX_MUSIC_PERFORMER_UPDATE = 0x2080,
   AAX_TRACK_TITLE_UPDATE,

   AAX_SHARED_DATA_DIR = 0x4000,

   /* MIDI */
   AAX_MIDI_RELEASE_FACTOR = 0x00200000, /* same as AAX_RELEASE_FACTOR */
   AAX_MIDI_ATTACK_FACTOR,
   AAX_MIDI_DECAY_FACTOR,
   AAX_MIDI_ATTACK_VELOCITY_FACTOR,
   AAX_MIDI_RELEASE_VELOCITY_FACTOR,
   AAX_MIDI_PRESSURE_FACTOR,
   AAX_MIDI_SOFT_FACTOR,

   AAX_RELEASE_MODE = -1
};

enum aaxCapabilities
{
   /* 0 - 63 is reserved for the number of (cores-1) */
   AAX_CPU_CORES              = 0x3F,
   AAX_64BIT                  = 0x40,  /* 64-bit whet set, otherwise 32-bit */

   AAX_SIMD                   = 0x100, /* SSE2 or NEON is supported  */
   AAX_SIMD256                = 0x200, /* AVX or HELIUM is supported */
   AAX_SIMD512                = 0x400, /* AVX2                       */

   AAX_RENDER_NORMAL          = 0,
   AAX_RENDER_SYNTHESIZER     = 0x4000000,
   AAX_RENDER_ARCADE          = 0x8000000,
   AAX_RENDER_MASK            = (AAX_RENDER_SYNTHESIZER|AAX_RENDER_ARCADE)
};

enum aaxErrorType
{
   AAX_ERROR_NONE = 0,
   AAX_INVALID_DEVICE         = 0x010,
   AAX_INVALID_SETUP          = 0x020,
   AAX_INVALID_HANDLE         = 0x030,
   AAX_INVALID_STATE          = 0x040,
   AAX_INVALID_ENUM           = 0x050,
   AAX_INVALID_PARAMETER      = 0x060,
   AAX_INVALID_REFERENCE      = 0x070,
   AAX_INSUFFICIENT_RESOURCES = 0x080,
   AAX_TIMEOUT                = 0x090,
   AAX_BACKEND_ERROR          = 0x0A0,
   AAX_DESTROYED_HANDLE       = 0x0B0,
   AAX_ERROR_MAX              = 0x0C0
};

enum aaxEmitterMode
{
   AAX_MODE_NONE = 0,
   AAX_STEREO = AAX_MODE_NONE,
   AAX_ABSOLUTE,
   AAX_RELATIVE,
   AAX_INDOOR = 4,
   AAX_EMITTER_MODE_MAX
};

enum aaxState
{
   AAX_STATE_NONE = 0,
   AAX_INITIALIZED,
   AAX_PLAYING,
   AAX_STOPPED,
   AAX_SUSPENDED,
   AAX_CAPTURING,
   AAX_PROCESSED,
   AAX_STANDBY,
   AAX_UPDATE,
   AAX_MAXIMUM,
   AAX_STATE_MAX = AAX_MAXIMUM,
};

enum aaxRenderMode
{
   AAX_MODE_READ = 0,
   AAX_MODE_WRITE_STEREO,
   AAX_MODE_WRITE_SPATIAL,
   AAX_MODE_WRITE_SURROUND,
   AAX_MODE_WRITE_HRTF,
   AAX_MODE_WRITE_MAX
};

enum aaxDistanceModel
{
   AAX_DISTANCE_MODEL_NONE = 0,
   AAX_EXPONENTIAL_DISTANCE,
   AAX_ISO9613_DISTANCE,
   AAX_DISTANCE_MODEL_MAX,

   AAX_DISTANCE_DELAY = 0x8000,
   AAX_EXPONENTIAL_DISTANCE_DELAY=(AAX_EXPONENTIAL_DISTANCE|AAX_DISTANCE_DELAY),
   AAX_ISO9613_DISTANCE_DELAY=(AAX_ISO9613_DISTANCE|AAX_DISTANCE_DELAY),

   AAX_AL_INVERSE_DISTANCE = 0x1000,
   AAX_AL_INVERSE_DISTANCE_CLAMPED,
   AAX_AL_LINEAR_DISTANCE,
   AAX_AL_LINEAR_DISTANCE_CLAMPED,
   AAX_AL_EXPONENT_DISTANCE,
   AAX_AL_EXPONENT_DISTANCE_CLAMPED,

   AAX_AL_DISTANCE_MODEL_MAX
};

enum aaxFilterType
{
   AAX_FILTER_NONE = 0,
   AAX_EQUALIZER,
   AAX_VOLUME_FILTER,
   AAX_DYNAMIC_GAIN_FILTER, /* tremolo */
   AAX_TIMED_GAIN_FILTER,
   AAX_DIRECTIONAL_FILTER,
   AAX_DISTANCE_FILTER,
   AAX_FREQUENCY_FILTER,
   AAX_BITCRUSHER_FILTER,
   AAX_GRAPHIC_EQUALIZER,
   AAX_COMPRESSOR,
   AAX_DYNAMIC_LAYER_FILTER,
   AAX_FILTER_MAX
};

enum aaxEffectType
{
   AAX_EFFECT_NONE = 0,
   AAX_PITCH_EFFECT,
   AAX_DYNAMIC_PITCH_EFFECT, /* vibrato */
   AAX_TIMED_PITCH_EFFECT,
   AAX_DISTORTION_EFFECT,
   AAX_PHASING_EFFECT,
   AAX_CHORUS_EFFECT,
   AAX_FLANGING_EFFECT,
   AAX_VELOCITY_EFFECT,
   AAX_REVERB_EFFECT,
   AAX_CONVOLUTION_EFFECT,
   AAX_RINGMODULATOR_EFFECT,
   AAX_DELAY_EFFECT,
   AAX_EFFECT_MAX
};

enum aaxParameter {	/* Filter & Effect parameter number definitions */
   /** AAX_VOLUME_FILTER **/
   AAX_GAIN = 0, AAX_MIN_GAIN, AAX_MAX_GAIN, AAX_AGC_RESPONSE_RATE,
   AAX_OBJECT_WIDTH = 0x10, AAX_OBJECT_HEIGHT, AAX_OBJECT_DEPTH, AAX_OBJECT_DENSITY_FACTOR,

   /** AAX_DIRECTIONAL_FILTER **/
   AAX_INNER_ANGLE = 0, AAX_OUTER_ANGLE, AAX_OUTER_GAIN, AAX_FORWARD_GAIN,

   /** AAX_DISTANCE_FILTER **/
   AAX_REF_DISTANCE = 0, AAX_MAX_DISTANCE, AAX_ROLLOFF_FACTOR,
   AAX_TEMPERATURE = 0x10, AAX_ATMOSPHERIC_PRESSURE, AAX_RELATIVE_HUMIDITY,

   /** AAX_FREQUENCY_FILTER **/
   /** AAX_EQUALIZER        **/
   AAX_CUTOFF_FREQUENCY = 0, AAX_LF_GAIN, AAX_HF_GAIN, AAX_RESONANCE,
   AAX_CUTOFF_FREQUENCY_HF = 0x10, AAX_LF_GAIN_HF, AAX_HF_GAIN_HF, AAX_RESONANCE_HF,
   /** AAX_FREQUENCY_FILTER **/
   AAX_SWEEP_RATE = AAX_RESONANCE_HF,

   /** AAX_GRAPHIC_EQUALIZER **/
   AAX_GAIN_BAND0 = 0,    AAX_GAIN_BAND1, AAX_GAIN_BAND2, AAX_GAIN_BAND3,
   AAX_GAIN_BAND4 = 0x10, AAX_GAIN_BAND5, AAX_GAIN_BAND6, AAX_GAIN_BAND7,

   /** AAX_TIMED_GAIN_FILTER **/
   /** AAX_TIMED_PITCH_EFFECT **/
   AAX_LEVEL0 = 0x00, AAX_TIME0, AAX_LEVEL1, AAX_TIME1,
   AAX_LEVEL2 = 0x10, AAX_TIME2, AAX_LEVEL3, AAX_TIME3,
   AAX_LEVEL4 = 0x20, AAX_TIME4, AAX_LEVEL5, AAX_TIME5,
   AAX_LEVEL6 = 0x30, AAX_TIME6, AAX_LEVEL7, AAX_TIME7,

   /** AAX_BITCRUSHER_FILTER, first parameter is noise level          **/
   AAX_NOISE_LEVEL = 0,
   AAX_SAMPLE_RATE = 0x10, AAX_STATICITY,
   /** AAX_DYNAMIC_GAIN_FILTER, first parameter is AAX_INITIAL_DELAY  **/
   /** AAX_DYNAMIC_PITCH_EFFECT, first parameter is AAX_INITIAL_DELAY **/
   AAX_INITIAL_DELAY = 0,
   /** AAX_RINGMODULATOR_EFFECT, first parameter is AAX_GAIN          **/
   /** AAX_PHASING_EFFECT                                             **/
   /** AAX_CHORUS_EFFECT                                              **/
   /** AAX_FLANGING_EFFECT                                            **/
   /** AAX_DELAY_EFFECT                                               **/
   AAX_DELAY_GAIN = 0, AAX_LFO_FREQUENCY, AAX_LFO_DEPTH, AAX_LFO_OFFSET, AAX_DELAY_TIME = AAX_LFO_OFFSET,
   AAX_DELAY_CUTOFF_FREQUENCY = 0x10, AAX_DELAY_CUTOFF_FREQUENCY_HF, AAX_FEEDBACK_GAIN, AAX_DELAY_RESONANCE,

   /** AAX_COMPRESSOR **/
   AAX_ATTACK_RATE = 0, AAX_RELEASE_RATE, AAX_COMPRESSION_RATIO, AAX_THRESHOLD,
   AAX_GATE_PERIOD = 0x11, AAX_GATE_THRESHOLD = 0x13,

   /** AAX_PITCH_EFFECT **/
   AAX_PITCH = 0, AAX_MAX_PITCH, AAX_PITCH_START, AAX_PITCH_RATE,

   /** AAX_DISTORTION_EFFECT **/
   AAX_DISTORTION_FACTOR=0, AAX_CLIPPING_FACTOR, AAX_MIX_FACTOR, AAX_ASYMMETRY,

   /** AAX_CONVOLUTION_EFFECT **/
   /* AAX_CUTOFF_FREQUENCY=0, AAX_LF_GAIN, AAX_MAX_GAIN, AAX_THRESHOLD */
   /* AAX_OBJECT_DEPTH = 0x10, AAX_OBJECT_HEIGHT, AAX_OBJECT_WIDTH, AAX_OBJECT_DENSITY_FACTOR, */

   /** AAX_REVERB_EFFECT **/
   /* AAX_CUTOFF_FREQUENCY=0, */ AAX_DELAY_DEPTH=1, AAX_DECAY_LEVEL, AAX_DECAY_DEPTH,
   /* AAX_OBJECT_DEPTH = 0x10, AAX_OBJECT_HEIGHT, AAX_OBJECT_WIDTH, AAX_OBJECT_DENSITY_FACTOR, */
   AAX_REVERB_LFO_FREQUENCY = 0x21, AAX_REVERB_LFO_DEPTH,

   /** AAX_VELOCITY_EFFECT **/
   AAX_SOUND_VELOCITY = 0, AAX_DOPPLER_FACTOR, AAX_LIGHT_VELOCITY
};


enum aaxSourceType
{
   AAX_INVERSE               = 0x80000000,
   AAX_LFO_STEREO            = 0x40000000,
   AAX_LFO_EXPONENTIAL       = 0x20000000, /* logarithmic or exponential      */

   /* 0x00100000 - 0x00F00000 are reserved for filter and effects */
   /* phasing, chorus, flanging, delay-line and reverb */
   AAX_EFFECT_2ND_ORDER      = 0x00200000,
   AAX_EFFECT_1ST_ORDER      = 0x00100000,
   AAX_EFFECT_ORDER_MASK     = (AAX_EFFECT_1ST_ORDER | AAX_EFFECT_2ND_ORDER),
   /* timed gain filter */
   AAX_RELEASE_FACTOR        = 0x00200000, /* same as AAX_MIDI_RELEASE_FACTOR */
   AAX_REPEAT                = 0x00100000,
   /* frequency filter */
   AAX_BUTTERWORTH           = AAX_FALSE,
   AAX_BESSEL                = 0x00100000,

   /* 0x0100 - 0x0F00 are reserved for filter orders */
   AAX_1ST_ORDER             = 0x0100,      AAX_6DB_OCT = AAX_1ST_ORDER,
   AAX_2ND_ORDER             = 0x0200,      AAX_12DB_OCT = AAX_2ND_ORDER,
   AAX_3RD_ORDER             = 0x0300,
   AAX_4TH_ORDER             = 0x0400,      AAX_24DB_OCT = AAX_4TH_ORDER,
   AAX_5TH_ORDER             = 0x0500,
   AAX_6TH_ORDER             = 0x0600,      AAX_36DB_OCT = AAX_6TH_ORDER,
   AAX_7TH_ORDER             = 0x0700,
   AAX_8TH_ORDER             = 0x0800,      AAX_48DB_OCT = AAX_8TH_ORDER,
   AAX_LAST_ORDER            = AAX_8TH_ORDER,
   AAX_RESONANCE_FACTOR      = 0x0F00,
   AAX_ORDER_MASK            = AAX_RESONANCE_FACTOR,
   AAX_MAX_ORDER             = (AAX_LAST_ORDER - AAX_1ST_ORDER),

   AAX_ANALOG_WAVEFORM       = 0,
   AAX_PURE_WAVEFORM         = 0x0010,

   /* noise, may be combined with waveforms */
   /* 0x0020 - 0x00E0 even numbers are reserved for noise types */
   AAX_WHITE_NOISE           = 0x0020,      AAX_1ST_NOISE = AAX_WHITE_NOISE,
   AAX_PINK_NOISE            = 0x0040,
   AAX_BROWNIAN_NOISE        = 0x0060,      AAX_LAST_NOISE = AAX_BROWNIAN_NOISE,
   AAX_MAX_NOISE             = (AAX_LAST_NOISE-AAX_1ST_NOISE+1),

   AAX_NOISE_MASK            = 0x00E0, /* bit-mask covering all noise types */

   /* waveforms */
   /* 0x0001 - 0x001F are reserved for waveforms and LFO source types */
   AAX_WAVE_NONE 	     = 0,
   AAX_CONSTANT              = 0x0001, /* equals to AAX_TRUE */
   AAX_SAWTOOTH              = 0x0002,      AAX_1ST_WAVE = AAX_SAWTOOTH,
   AAX_SQUARE                = 0x0003,
   AAX_TRIANGLE              = 0x0004,
   AAX_SINE                  = 0x0005,
   AAX_CYCLOID               = 0x0006,
   AAX_IMPULSE               = 0x0007,      AAX_LAST_WAVE = AAX_IMPULSE,

   AAX_RANDOMNESS            = 0x000C,      AAX_1ST_SOURCE = AAX_RANDOMNESS,
   AAX_ENVELOPE_FOLLOW       = 0x000D,
   AAX_TIMED_TRANSITION      = 0x000E,
   AAX_RANDOM_SELECT         = 0x000F,      AAX_LAST_SOURCE = AAX_RANDOM_SELECT,
   AAX_MAX_WAVE              = (AAX_LAST_WAVE-AAX_1ST_WAVE+1),

   AAX_INVERSE_SAWTOOTH      = (AAX_INVERSE | AAX_SAWTOOTH),
   AAX_INVERSE_SQUARE        = (AAX_INVERSE | AAX_SQUARE),
   AAX_INVERSE_TRIANGLE      = (AAX_INVERSE | AAX_TRIANGLE),
   AAX_INVERSE_SINE          = (AAX_INVERSE | AAX_SINE),
   AAX_INVERSE_CYCLOID       = (AAX_INVERSE | AAX_CYCLOID),
   AAX_INVERSE_IMPULSE       = (AAX_INVERSE | AAX_IMPULSE),

   AAX_INVERSE_ENVELOPE_FOLLOW = (AAX_INVERSE | AAX_ENVELOPE_FOLLOW),
   AAX_INVERSE_TIMED_TRANSITION = (AAX_INVERSE | AAX_TIMED_TRANSITION),

   AAX_SOURCE_MASK           = 0x001F, /* bit-mask covering all waveforms   */
   AAX_ALL_SOURCE_MASK       = (AAX_SOURCE_MASK | AAX_NOISE_MASK),

   /* bit-mask covering all waveforms, noise types and filter orders */
   AAX_SOURCE_ORDER_MASK     = (AAX_ORDER_MASK | AAX_ALL_SOURCE_MASK),

   /* timed gain filter */
   AAX_REPEAT_MASK           = AAX_SOURCE_ORDER_MASK,
   AAX_MAX_REPEAT            = (AAX_REPEAT_MASK-1)
};

enum aaxSignalLevelType
{
   AAX_32DB    = -32,
   AAX_64DB    = -64,
   AAX_96DB    = -96,
   AAX_128DB   = -128
};

enum aaxProcessingType
{
   AAX_PROCESSING_NONE = 0,

   AAX_OVERWRITE,
   AAX_ADD,
   AAX_MIX,
   AAX_RINGMODULATE,
   AAX_APPEND,

   AAX_PROCESSING_MAX
};

typedef struct aax_handle_t* aaxConfig;
typedef struct aax_buffer_t* aaxBuffer;
typedef struct aax_emitter_t* aaxEmitter;
typedef struct aax_frame_t* aaxFrame;
typedef void *aaxDSP;
typedef aaxDSP aaxFilter;
typedef aaxDSP aaxEffect;

typedef float aaxVec3f[3];
typedef double aaxVec3d[3];
typedef float aaxVec4f[4];
typedef double aaxVec4d[4];
typedef float aaxMtx4f[4][4];
typedef double aaxMtx4d[4][4];


/*
 * Version and Support information
 */
AAX_API int AAX_APIENTRY aaxPlaySoundLogo(const char*);
AAX_API void AAX_APIENTRY aaxFree(void*);

AAX_API unsigned int AAX_APIENTRY aaxGetSetup(enum aaxSetupType);

AAX_API unsigned int AAX_APIENTRY aaxGetByType(enum aaxSetupType);
AAX_API int AAX_APIENTRY aaxGetByName(const char*, enum aaxTypeName);
AAX_API const char* AAX_APIENTRY aaxGetString(enum aaxSetupType);
AAX_API const char* AAX_APIENTRY aaxGetFormatString(enum aaxFormat);

AAX_API unsigned AAX_APIENTRY aaxGetBytesPerSample(enum aaxFormat);
AAX_API unsigned AAX_APIENTRY aaxGetBitsPerSample(enum aaxFormat);

AAX_API enum aaxErrorType AAX_APIENTRY aaxGetErrorNo(void);
AAX_API const char* AAX_APIENTRY aaxGetErrorString(enum aaxErrorType);

AAX_API unsigned AAX_APIENTRY aaxGetNoCores(aaxConfig);
AAX_API int AAX_APIENTRY aaxIsValid(const void*, enum aaxHandleType);

AAX_API int AAX_APIENTRY aaxIsFilterSupported(aaxConfig, const char*);
AAX_API int AAX_APIENTRY aaxIsEffectSupported(aaxConfig, const char*);


/*
 * Driver information
 */
AAX_API aaxConfig AAX_APIENTRY aaxDriverGetByName(const char*, enum aaxRenderMode);
AAX_API unsigned AAX_APIENTRY aaxDriverGetCount(enum aaxRenderMode);
AAX_API aaxConfig AAX_APIENTRY aaxDriverGetByPos(unsigned, enum aaxRenderMode);
AAX_API int AAX_APIENTRY aaxDriverDestroy(aaxConfig);

AAX_API unsigned AAX_APIENTRY aaxDriverGetDeviceCount(const aaxConfig, enum aaxRenderMode);
AAX_API const char* AAX_APIENTRY aaxDriverGetDeviceNameByPos(const aaxConfig, unsigned, enum aaxRenderMode);
AAX_API unsigned AAX_APIENTRY aaxDriverGetInterfaceCount(const aaxConfig, const char*, enum aaxRenderMode);
AAX_API const char* AAX_APIENTRY aaxDriverGetInterfaceNameByPos(const aaxConfig, const char*, unsigned, enum aaxRenderMode);
AAX_API const char* AAX_APIENTRY aaxDriverGetSetup(const aaxConfig, enum aaxSetupType);
AAX_API int AAX_APIENTRY aaxDriverSetSetup(const aaxConfig, enum aaxSetupType,  const char*);
AAX_API int AAX_APIENTRY aaxDriverGetSupport(const aaxConfig, enum aaxRenderMode);
AAX_API enum aaxErrorType AAX_APIENTRY aaxDriverGetErrorNo(aaxConfig);


/*
 * Driver functions
 */
AAX_API aaxConfig AAX_APIENTRY aaxDriverOpenDefault(enum aaxRenderMode);
AAX_API aaxConfig AAX_APIENTRY aaxDriverOpenByName(const char*, enum aaxRenderMode);
AAX_API aaxConfig AAX_APIENTRY aaxDriverOpen(aaxConfig);
AAX_API int AAX_APIENTRY aaxDriverClose(aaxConfig);


/*
 * Mixer/Playback setup
 */
AAX_API int AAX_APIENTRY aaxMixerSetState(aaxConfig, enum aaxState);
AAX_API enum aaxState AAX_APIENTRY aaxMixerGetState(const aaxConfig);

AAX_API int AAX_APIENTRY aaxMixerSetMode(aaxConfig, enum aaxModeType, int);
AAX_API int AAX_APIENTRY aaxMixerGetMode(const aaxConfig, enum aaxModeType);

AAX_API int AAX_APIENTRY aaxMixerSetSetup(aaxConfig, enum aaxSetupType, unsigned int);
AAX_API unsigned int AAX_APIENTRY aaxMixerGetSetup(const aaxConfig, enum aaxSetupType);

AAX_API int AAX_APIENTRY aaxMixerAddBuffer(aaxConfig, aaxBuffer);

AAX_API int AAX_APIENTRY aaxMixerSetFilter(aaxConfig, aaxFilter);
AAX_API aaxFilter AAX_APIENTRY aaxMixerGetFilter(const aaxConfig, enum aaxFilterType);

AAX_API int AAX_APIENTRY aaxMixerSetEffect(aaxConfig, aaxEffect);
AAX_API aaxEffect AAX_APIENTRY aaxMixerGetEffect(const aaxConfig, enum aaxEffectType);

AAX_API int AAX_APIENTRY aaxMixerRegisterSensor(const aaxConfig, const aaxConfig);
AAX_API int AAX_APIENTRY aaxMixerDeregisterSensor(const aaxConfig, const aaxConfig);
AAX_API int AAX_APIENTRY aaxMixerRegisterEmitter(const aaxConfig, const aaxEmitter);
AAX_API int AAX_APIENTRY aaxMixerDeregisterEmitter(const aaxConfig, const aaxEmitter);
AAX_API int AAX_APIENTRY aaxMixerRegisterAudioFrame(const aaxConfig, const aaxFrame);
AAX_API int AAX_APIENTRY aaxMixerDeregisterAudioFrame(const aaxConfig, const aaxFrame);


/*
 * Scenery setup
 */
AAX_API int AAX_APIENTRY aaxScenerySetSetup(aaxConfig, enum aaxSetupType, unsigned int);
AAX_API unsigned int AAX_APIENTRY aaxSceneryGetSetup(const aaxConfig, enum aaxSetupType);

AAX_API int AAX_APIENTRY aaxScenerySetFilter(aaxConfig, aaxFilter);
AAX_API aaxFilter AAX_APIENTRY aaxSceneryGetFilter(const aaxConfig, enum aaxFilterType);

AAX_API int AAX_APIENTRY aaxScenerySetEffect(aaxConfig, aaxEffect);
AAX_API aaxEffect AAX_APIENTRY aaxSceneryGetEffect(const aaxConfig, enum aaxEffectType);

/*
 * Sound buffer related
 */
AAX_API aaxBuffer AAX_APIENTRY aaxBufferCreate(aaxConfig, unsigned int, unsigned, enum aaxFormat);
AAX_API int AAX_APIENTRY aaxBufferDestroy(aaxBuffer);

AAX_API int AAX_APIENTRY aaxBufferSetSetup(aaxBuffer, enum aaxSetupType, unsigned int);
AAX_API unsigned int AAX_APIENTRY aaxBufferGetSetup(const aaxBuffer, enum aaxSetupType);

AAX_API int AAX_APIENTRY aaxBufferSetData(aaxBuffer, const void*);
AAX_API void** AAX_APIENTRY aaxBufferGetData(const aaxBuffer);
AAX_API aaxBuffer AAX_APIENTRY aaxBufferReadFromStream(aaxConfig, const char*);
AAX_API int AAX_APIENTRY aaxBufferWriteToFile(aaxBuffer, const char*, enum aaxProcessingType);

/*
 * Source/Emitter manipulation
 */
AAX_API aaxEmitter AAX_APIENTRY aaxEmitterCreate(void);
AAX_API int AAX_APIENTRY aaxEmitterDestroy(aaxEmitter);

AAX_API int AAX_APIENTRY aaxEmitterSetMode(aaxEmitter, enum aaxModeType, int);
AAX_API int AAX_APIENTRY aaxEmitterGetMode(const aaxEmitter, enum aaxModeType);

AAX_API int AAX_APIENTRY aaxEmitterSetState(aaxEmitter, enum aaxState);
AAX_API int AAX_APIENTRY aaxEmitterGetState(const aaxEmitter);

AAX_API int AAX_APIENTRY aaxEmitterSetSetup(aaxEmitter, enum aaxSetupType, unsigned int);
AAX_API unsigned int AAX_APIENTRY aaxEmitterGetSetup(const aaxEmitter, enum aaxSetupType);

AAX_API int AAX_APIENTRY aaxEmitterSetMatrix64(aaxEmitter, aaxMtx4d);
AAX_API int AAX_APIENTRY aaxEmitterGetMatrix64(aaxEmitter, aaxMtx4d);

AAX_API int AAX_APIENTRY aaxEmitterSetVelocity(aaxEmitter, aaxVec3f);
AAX_API int AAX_APIENTRY aaxEmitterGetVelocity(const aaxEmitter, aaxVec3f);

AAX_API int AAX_APIENTRY aaxEmitterSetFilter(aaxEmitter, aaxFilter);
AAX_API aaxFilter AAX_APIENTRY aaxEmitterGetFilter(const aaxEmitter, enum aaxFilterType);

AAX_API int AAX_APIENTRY aaxEmitterSetEffect(aaxEmitter, aaxEffect);
AAX_API aaxEffect AAX_APIENTRY aaxEmitterGetEffect(const aaxEmitter, enum aaxEffectType);

AAX_API int AAX_APIENTRY aaxEmitterAddBuffer(aaxEmitter, aaxBuffer);
AAX_API int AAX_APIENTRY aaxEmitterRemoveBuffer(aaxEmitter);

AAX_API unsigned int AAX_APIENTRY aaxEmitterGetNoBuffers(const aaxEmitter, enum aaxState);
AAX_API aaxBuffer AAX_APIENTRY aaxEmitterGetBufferByPos(const aaxEmitter, unsigned int, int);

AAX_API int AAX_APIENTRY aaxEmitterSetOffset(aaxEmitter, unsigned long, enum aaxType);
AAX_API unsigned long AAX_APIENTRY aaxEmitterGetOffset(const aaxEmitter, enum aaxType);

AAX_API int AAX_APIENTRY aaxEmitterSetOffsetSec(aaxEmitter, float);
AAX_API float AAX_APIENTRY aaxEmitterGetOffsetSec(const aaxEmitter);


/*
 * Listener/Sensor manipulation
 */
AAX_API int AAX_APIENTRY aaxSensorSetState(aaxConfig, enum aaxState);
AAX_API enum aaxState AAX_APIENTRY aaxSensorGetState(const aaxConfig);

AAX_API int AAX_APIENTRY aaxSensorSetMode(aaxConfig, enum aaxModeType, int);
AAX_API int AAX_APIENTRY aaxSensorGetMode(const aaxConfig, enum aaxModeType);

AAX_API int AAX_APIENTRY aaxSensorSetSetup(aaxConfig, enum aaxSetupType, unsigned int);
AAX_API unsigned int AAX_APIENTRY aaxSensorGetSetup(const aaxConfig, enum aaxSetupType);

AAX_API int AAX_APIENTRY aaxSensorSetMatrix64(aaxConfig, aaxMtx4d);
AAX_API int AAX_APIENTRY aaxSensorGetMatrix64(const aaxConfig, aaxMtx4d);

AAX_API int AAX_APIENTRY aaxSensorSetVelocity(aaxConfig, aaxVec3f);
AAX_API int AAX_APIENTRY aaxSensorGetVelocity(const aaxConfig, aaxVec3f);

AAX_API int AAX_APIENTRY aaxSensorWaitForBuffer(const aaxConfig, float);
AAX_API aaxBuffer AAX_APIENTRY aaxSensorGetBuffer(const aaxConfig);

AAX_API unsigned long AAX_APIENTRY aaxSensorGetOffset(const aaxConfig, enum aaxType);
AAX_API int AAX_APIENTRY aaxSensorSetOffset(aaxConfig, unsigned long, enum aaxType);
AAX_API int AAX_APIENTRY aaxSensorSetOffsetSec(aaxConfig, float);



/*
 * Filter support
 */
AAX_API aaxFilter AAX_APIENTRY aaxFilterCreate(aaxDSP, enum aaxFilterType);
AAX_API int AAX_APIENTRY aaxFilterDestroy(aaxFilter);
AAX_API const char* AAX_APIENTRY aaxFilterGetNameByType(aaxConfig, enum aaxFilterType);
AAX_API int AAX_APIENTRY aaxFilterSetParam(aaxFilter, int, int, float);
AAX_API int AAX_APIENTRY aaxFilterSetSlotParams(aaxFilter, unsigned, int, aaxVec4f);
AAX_API int AAX_APIENTRY aaxFilterSetSlot(aaxFilter, unsigned, int, float, float, float, float);
AAX_API int AAX_APIENTRY aaxFilterSetState(aaxFilter, int);
AAX_API int AAX_APIENTRY aaxFilterAddBuffer(aaxFilter, aaxBuffer);
AAX_API float AAX_APIENTRY aaxFilterGetParam(const aaxFilter, int, int);
AAX_API int AAX_APIENTRY aaxFilterGetSlotParams(const aaxFilter, unsigned, int, aaxVec4f);
AAX_API int AAX_APIENTRY aaxFilterGetSlot(const aaxFilter, unsigned, int, float*, float*, float*, float*);
AAX_API int AAX_APIENTRY aaxFilterGetState(aaxFilter);


/*
 * Effect support
 */
AAX_API aaxEffect AAX_APIENTRY aaxEffectCreate(aaxDSP, enum aaxEffectType);
AAX_API int AAX_APIENTRY aaxEffectDestroy(aaxEffect);
AAX_API const char* AAX_APIENTRY aaxEffectGetNameByType(aaxConfig, enum aaxEffectType);
AAX_API int AAX_APIENTRY aaxEffectSetParam(aaxEffect, int, int, float);
AAX_API int AAX_APIENTRY aaxEffectSetSlotParams(aaxEffect, unsigned, int, aaxVec4f);
AAX_API int AAX_APIENTRY aaxEffectSetSlot(aaxEffect, unsigned, int, float, float, float, float);
AAX_API int AAX_APIENTRY aaxEffectSetState(aaxEffect, int);
AAX_API int AAX_APIENTRY aaxEffectAddBuffer(aaxEffect, aaxBuffer);
AAX_API float AAX_APIENTRY aaxEffectGetParam(const aaxEffect, int , int);
AAX_API int AAX_APIENTRY aaxEffectGetSlotParams(const aaxEffect, unsigned, int, aaxVec4f);
AAX_API int AAX_APIENTRY aaxEffectGetSlot(const aaxEffect, unsigned, int, float*, float*, float*, float*);
AAX_API int AAX_APIENTRY aaxEffectGetState(aaxEffect);


/*
 * Matrix operations
 * Default iid 64-bit matrices (aaxMtx4d)
 */
AAX_API int AAX_APIENTRY aaxMatrix64CopyMatrix64(aaxMtx4d, aaxMtx4d);
AAX_API int AAX_APIENTRY aaxMatrix64SetIdentityMatrix(aaxMtx4d);
AAX_API int AAX_APIENTRY aaxMatrix64Translate(aaxMtx4d, double, double, double);
AAX_API int AAX_APIENTRY aaxMatrix64Rotate(aaxMtx4d, double, double, double, double);
AAX_API int AAX_APIENTRY aaxMatrix64Multiply(aaxMtx4d, aaxMtx4d);
AAX_API int AAX_APIENTRY aaxMatrix64Inverse(aaxMtx4d);
AAX_API int AAX_APIENTRY aaxMatrix64SetDirection(aaxMtx4d, aaxVec3d, aaxVec3f);
AAX_API int AAX_APIENTRY aaxMatrix64SetOrientation(aaxMtx4d, aaxVec3d, aaxVec3f, aaxVec3f);
AAX_API int AAX_APIENTRY aaxMatrix64GetOrientation(aaxMtx4d, aaxVec3d, aaxVec3f, aaxVec3f);

AAX_API int AAX_APIENTRY aaxMatrixCopyMatrix(aaxMtx4f, aaxMtx4f);
AAX_API int AAX_APIENTRY aaxMatrixSetIdentityMatrix(aaxMtx4f);
AAX_API int AAX_APIENTRY aaxMatrixTranslate(aaxMtx4f, float, float, float);
AAX_API int AAX_APIENTRY aaxMatrixRotate(aaxMtx4f, float, float, float, float);
AAX_API int AAX_APIENTRY aaxMatrixMultiply(aaxMtx4f, aaxMtx4f);
AAX_API int AAX_APIENTRY aaxMatrixInverse(aaxMtx4f);
AAX_API int AAX_APIENTRY aaxMatrixToMatrix64(aaxMtx4d, aaxMtx4f);


/*
 * AudioFrame support (version 2.0 and later)
 */
AAX_API aaxFrame AAX_APIENTRY aaxAudioFrameCreate(aaxConfig);
AAX_API int AAX_APIENTRY aaxAudioFrameDestroy(aaxFrame);

AAX_API int AAX_APIENTRY aaxAudioFrameSetState(aaxFrame, enum aaxState);
AAX_API int AAX_APIENTRY aaxAudioFrameGetState(const aaxFrame);

AAX_API int AAX_APIENTRY aaxAudioFrameSetMode(aaxFrame, enum aaxModeType, int);
AAX_API int AAX_APIENTRY aaxAudioFrameGetMode(const aaxFrame, enum aaxModeType);

AAX_API int AAX_APIENTRY aaxAudioFrameSetSetup(aaxFrame, enum aaxSetupType, unsigned int);
AAX_API unsigned int aaxAudioFrameGetSetup(const aaxFrame, enum aaxSetupType);

AAX_API int AAX_APIENTRY aaxAudioFrameSetMatrix64(aaxFrame, aaxMtx4d);
AAX_API int AAX_APIENTRY aaxAudioFrameGetMatrix64(aaxFrame, aaxMtx4d);

AAX_API int AAX_APIENTRY aaxAudioFrameSetVelocity(aaxFrame, aaxVec3f);
AAX_API int AAX_APIENTRY aaxAudioFrameGetVelocity(aaxFrame, aaxVec3f);

AAX_API int AAX_APIENTRY aaxAudioFrameSetFilter(aaxFrame, aaxFilter);
AAX_API aaxFilter AAX_APIENTRY aaxAudioFrameGetFilter(const aaxFrame, enum aaxFilterType);

AAX_API int AAX_APIENTRY aaxAudioFrameSetEffect(aaxFrame, aaxEffect);
AAX_API aaxEffect AAX_APIENTRY aaxAudioFrameGetEffect(const aaxFrame, enum aaxEffectType);

AAX_API int AAX_APIENTRY aaxAudioFrameAddBuffer(aaxFrame, aaxBuffer);
AAX_API int AAX_APIENTRY aaxAudioFrameWaitForBuffer(aaxFrame, float);
AAX_API aaxBuffer AAX_APIENTRY aaxAudioFrameGetBuffer(const aaxFrame);

AAX_API int AAX_APIENTRY aaxAudioFrameRegisterSensor(const aaxFrame, const aaxConfig);
AAX_API int AAX_APIENTRY aaxAudioFrameDeregisterSensor(const aaxFrame, const aaxConfig);

AAX_API int AAX_APIENTRY aaxAudioFrameRegisterEmitter(const aaxFrame, const aaxEmitter);
AAX_API int AAX_APIENTRY aaxAudioFrameDeregisterEmitter(const aaxFrame, const aaxEmitter);

AAX_API int AAX_APIENTRY aaxAudioFrameRegisterAudioFrame(const aaxFrame, const aaxFrame);
AAX_API int AAX_APIENTRY aaxAudioFrameDeregisterAudioFrame(const aaxFrame, const aaxFrame);

#if defined(TARGET_OS_MAC) && TARGET_OS_MAC
# pragma export off
#endif

#if defined(__cplusplus)
}  /* extern "C" */
#endif

#endif

